name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-django pytest-asyncio
          pip install -r requirements.txt
      
      - name: Create .env file
        run: |
          echo "DJANGO_SECRET_KEY=test-secret-key-for-ci" > .env
          echo "DEBUG=True" >> .env
          echo "POSTGRES_DB=test_db" >> .env
          echo "POSTGRES_USER=test_user" >> .env
          echo "POSTGRES_PASSWORD=test_password" >> .env
          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "TELEGRAM_TOKEN=test-token" >> .env
          echo "PAIR=BTCUSDT" >> .env
          echo "NOTIFICATION_CHAT_ID=123456" >> .env
      
      - name: Run migrations
        run: |
          python manage.py migrate --noinput
      
      - name: Run tests
        run: |
          pytest tests/ -v --tb=short
      
      - name: Test Summary
        if: always()
        run: echo "Tests completed"

  deploy:
    name: Deploy to Dev Server
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    environment: development
    
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          password: ${{ secrets.DEPLOY_PASSWORD }}
          script: |
            cd ~/scalping-mexc-bot
            
            echo "üì• Pulling latest changes from dev branch..."
            git fetch origin
            git checkout dev
            git pull origin dev
            
            echo "üîÑ Restarting services..."
            docker-compose down
            docker-compose up -d --build
            
            echo "‚è≥ Waiting for services to start..."
            sleep 10
            
            echo "‚úÖ Deployment completed successfully!"
            docker-compose ps

