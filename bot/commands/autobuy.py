import asyncio
from aiogram.types import Message
from asgiref.sync import sync_to_async
from django.utils import timezone
from users.models import Deal, User
from subscriptions.models import Subscription
from bot.utils.user_autobuy_tasks import user_autobuy_tasks
from bot.utils.mexc import handle_mexc_response
from bot.utils.api_errors import parse_mexc_error
from mexc_sdk import Trade
from logger import logger
from decimal import Decimal
from bot.constants import MAX_FAILS
import json
import time
import weakref
import gc

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è autobuy –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
autobuy_states = {}  # {user_id: {'last_buy_price': float, 'active_orders': [], etc.}}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
trigger_states = {}  # {user_id: {'trigger_price': float, 'trigger_time': float, 'is_rise_trigger': bool}}

async def autobuy_loop(message: Message, telegram_id: int):
    startup_fail_count = 0

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º lock –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫
    buy_lock = asyncio.Lock()

    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = None

    while startup_fail_count < MAX_FAILS:
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º websocket_manager –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
            from bot.utils.websocket_manager import websocket_manager

            user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
            trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
            symbol = user.pair.replace("/", "")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if telegram_id not in autobuy_states:
                autobuy_states[telegram_id] = {
                    'active_orders': [],
                    'last_buy_price': None,
                    'current_price': None,
                    'price_callbacks': [],
                    'bookticker_callbacks': [],
                    'last_trade_time': 0,
                    'is_ready': False,
                    'waiting_for_opportunity': False,  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                    'restart_after': 0,  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
                    'waiting_reported': False,  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —Å–æ–æ–±—â–∏–ª–∏ –ª–∏ –º—ã –æ —Ç–æ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º
                    'consecutive_errors': 0,  # –°—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
                    'last_drop_notification': 0,  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞–¥–µ–Ω–∏–∏
                    'last_rise_notification': 0,  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ
                    'last_buy_success_time': 0,  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
                    'last_order_filled_time': 0,  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
                    'trigger_price': None,  # –¶–µ–Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Ä–æ—Å—Ç–µ
                    'trigger_time': 0,  # –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
                    'trigger_activated_time': 0,  # –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–ª–∞ —Ç—Ä–∏–≥–≥–µ—Ä)
                    'is_rise_trigger': False,  # –§–ª–∞–≥ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –Ω–∞ —Ä–æ—Å—Ç–µ
                    'is_trigger_activated': False,  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
                    'pause_trend_prices': [],  # –°–ø–∏—Å–æ–∫ —Ü–µ–Ω –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
                    'trend_only_rise': True,  # –§–ª–∞–≥ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
                    'last_pause_price': None,  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
                    'rise_buy_count': 0  # –°—á–µ—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Ä–æ—Å—Ç–µ –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ
                }

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –ë–î
            deals_qs = Deal.objects.filter(
                user=user,
                status__in=["SELL_ORDER_PLACED", "NEW", "PARTIALLY_FILLED"],
                is_autobuy=True
            ).order_by("-created_at")

            active_deals = await sync_to_async(list)(deals_qs)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            active_orders = []
            for deal in active_deals:
                active_orders.append({
                    "order_id": deal.order_id,
                    "buy_price": float(deal.buy_price),
                    "notified": False,
                    "user_order_number": deal.user_order_number,
                })

            autobuy_states[telegram_id]['active_orders'] = active_orders

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_buy_price –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            if active_orders:
                most_recent_order = max(active_orders, key=lambda x: x.get("user_order_number", 0))
                autobuy_states[telegram_id]['last_buy_price'] = most_recent_order["buy_price"]
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏: {most_recent_order['buy_price']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not websocket_manager.market_connection:
                await websocket_manager.connect_market_data()
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ bookTicker –¥–∞–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞–µ—Ç –∏ —Ü–µ–Ω—ã, –∏ bid/ask)
            if symbol not in websocket_manager.bookticker_subscriptions:
                await websocket_manager.subscribe_bookticker_data([symbol])
                logger.info(f"–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ bookTicker –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è bookTicker –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π –∫–æ–ª–±—ç–∫ –¥–ª—è —Ü–µ–Ω)
            async def update_bookticker_for_autobuy(symbol_name, bid_price, ask_price, bid_qty, ask_qty):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–±–∞–π
                    user_data = await sync_to_async(User.objects.filter(telegram_id=telegram_id, autobuy=True).exists)()
                    if not user_data:
                        return

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã
                    direction_info = websocket_manager.get_price_direction(symbol_name)
                    is_rise = direction_info.get('is_rise', False)
                    current_time = time.time()
                    mid_price = (float(bid_price) + float(ask_price)) / 2

                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_settings = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
                    loss_threshold = float(user_settings.loss)
                    profit_percent = float(user_settings.profit)
                    pause_seconds = user_settings.pause

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    autobuy_states[telegram_id]['current_price'] = mid_price

                    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ bookTicker
                    logger.debug(f"BookTicker update for {telegram_id} ({symbol_name}): bid={bid_price}, ask={ask_price}, mid={mid_price:.6f}, is_rise={is_rise}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Ä–æ—Å—Ç–µ
                    await check_rise_triggers(telegram_id, symbol_name, float(bid_price), float(ask_price), is_rise, current_time, user_settings)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º ask —Ü–µ–Ω—É)
                    last_buy_price = autobuy_states[telegram_id]['last_buy_price']
                    if last_buy_price is not None:
                        ask_price = float(ask_price)
                        price_drop_percent = ((last_buy_price - ask_price) / last_buy_price * 100) if last_buy_price > 0 else 0
                        last_drop_notification = autobuy_states[telegram_id].get('last_drop_notification', 0)

                        if price_drop_percent >= loss_threshold and (current_time - last_drop_notification) > 10:
                            autobuy_states[telegram_id]['last_drop_notification'] = current_time
                            logger.info(f"Price drop condition met for {telegram_id}: ask={ask_price:.6f}, last_buy={last_buy_price:.6f}, drop={price_drop_percent:.2f}% >= {loss_threshold:.2f}%")
                            
                            # Send notification using bot instance directly
                            from bot.config import bot_instance
                            try:
                                await bot_instance.send_message(
                                    telegram_id,
                                    f"üîª –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è {symbol_name}\n\n"
                                    f"üîª –¶–µ–Ω–∞ ({ask_price:.6f} USDC) —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ {price_drop_percent:.2f}% –æ—Ç –ø–æ–∫—É–ø–∫–∏ –ø–æ {last_buy_price:.6f} USDC. \n"
                                    f"–ü–æ–∫—É–ø–∞–µ–º –ø–æ —É—Å–ª–æ–≤–∏—é –ø–∞–¥–µ–Ω–∏—è ({loss_threshold:.2f}%)."
                                )
                                logger.info(f"Drop notification sent to {telegram_id}")
                            except Exception as e:
                                logger.error(f"Failed to send drop notification to {telegram_id}: {e}")
                            
                            # Create a fake message object for process_buy
                            from bot.utils.autobuy_restart import FakeMessage
                            from bot.config import bot_instance
                            fake_message = FakeMessage(telegram_id, bot_instance)
                            logger.info(f"Starting process_buy for {telegram_id} due to price drop")
                            asyncio.create_task(process_buy(telegram_id, "price_drop", fake_message, user_settings))

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ bookTicker autobuy –¥–ª—è {telegram_id} ({symbol_name}): {e}", exc_info=True)

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫ —Å WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            await websocket_manager.register_bookticker_callback(symbol, update_bookticker_for_autobuy)
            autobuy_states[telegram_id]['bookticker_callbacks'].append(update_bookticker_for_autobuy)
            logger.info(f"Registered bookTicker callback for {telegram_id} on {symbol}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ REST API –¥–ª—è –Ω–∞—á–∞–ª–∞
            ticker_data = trade_client.ticker_price(symbol)
            handle_mexc_response(ticker_data, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")
            current_price = float(ticker_data["price"])
            autobuy_states[telegram_id]['current_price'] = current_price
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è {telegram_id}: {current_price}")

            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            autobuy_states[telegram_id]['is_ready'] = True

            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞, –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É
            if not active_orders and current_price > 0:
                logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –¥–ª—è {telegram_id} –ø–æ —Ü–µ–Ω–µ {current_price}")
                await process_buy(telegram_id, "initial_purchase", message, user)

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            asyncio.create_task(periodic_resource_check(telegram_id))

            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∞–≤—Ç–æ–±–∞–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            await message.answer(
                f"‚úÖ *–ê–≤—Ç–æ–±–∞–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n"
                f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{current_price:.6f}` {symbol[3:]}\n"
                f"üí∞ –°—É–º–º–∞ –∑–∞–∫—É–ø–∫–∏: `{user.buy_amount}` {symbol[3:]}\n"
                f"üìà –ü—Ä–æ—Ñ–∏—Ç: `{user.profit}%`\n"
                f"üìâ –ü–∞–¥–µ–Ω–∏–µ: `{user.loss}%`\n"
                f"‚è±Ô∏è –ü–∞—É–∑–∞: `{user.pause}` —Å–µ–∫\n",
                parse_mode="Markdown"
            )

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–±–∞—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏
            while True:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                subscription = await sync_to_async(
                    Subscription.objects.filter(user=user).order_by('-expires_at').first
                )()
                if not subscription or subscription.expires_at < timezone.now():
                    user.autobuy = False
                    await sync_to_async(user.save)()
                    task = user_autobuy_tasks.get(telegram_id)
                    if task:
                        task.cancel()
                        del user_autobuy_tasks[telegram_id]
                    await message.answer("‚õî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–∏–æ–¥–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                current_time = time.time()
                restart_after = autobuy_states[telegram_id].get('restart_after', 0)
                waiting_for_opportunity = autobuy_states[telegram_id].get('waiting_for_opportunity', False)

                if waiting_for_opportunity and restart_after > 0 and current_time >= restart_after:
                    # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É
                    autobuy_states[telegram_id]['restart_after'] = 0
                    autobuy_states[telegram_id]['waiting_for_opportunity'] = False
                    autobuy_states[telegram_id]['waiting_reported'] = False
                    logger.info(f"–ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ –∏—Å—Ç–µ–∫ –¥–ª—è {telegram_id} (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ)")

                    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                    if not autobuy_states[telegram_id]['active_orders']:
                        # await message.answer(f"üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–±–∞–π –ø–æ—Å–ª–µ –ø–∞—É–∑—ã (–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª). –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {autobuy_states[telegram_id]['current_price']}")
                        await process_buy(telegram_id, "after_waiting_period_main_loop", message, user)

                # –ü—Ä–æ—Å—Ç–æ –∂–¥–µ–º, —Ä–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫–æ–ª–±—ç–∫–∞—Ö
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

            break  # –í—ã—Ö–æ–¥ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞

        except asyncio.CancelledError:
            logger.info(f"–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–±–∞—è –¥–ª—è {telegram_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            if telegram_id in autobuy_states:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º websocket_manager –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
                from bot.utils.websocket_manager import websocket_manager

                # Clean up price callbacks
                for callback in autobuy_states[telegram_id]['price_callbacks']:
                    try:
                        user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
                        symbol_to_unregister = user.pair.replace("/", "")
                        if symbol_to_unregister in websocket_manager.price_callbacks:
                            if callback in websocket_manager.price_callbacks[symbol_to_unregister]:
                                websocket_manager.price_callbacks[symbol_to_unregister].remove(callback)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ price –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è {telegram_id}: {e}")
                
                # Clean up bookTicker callbacks
                for callback in autobuy_states[telegram_id]['bookticker_callbacks']:
                    try:
                        user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
                        symbol_to_unregister = user.pair.replace("/", "")
                        await websocket_manager.unregister_bookticker_callback(symbol_to_unregister, callback)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ bookTicker –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è {telegram_id}: {e}")

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
            if session:
                try:
                    await session.close()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")

            raise

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ autobuy_loop –¥–ª—è {telegram_id}, –ø–∞—É–∑–∞ –∞–≤—Ç–æ–±–∞—è 30 —Å–µ–∫—É–Ω–¥: {e}")
            startup_fail_count += 1
            if startup_fail_count >= MAX_FAILS:
                error_message = parse_mexc_error(e)
                await message.answer(f"‚õî {error_message}\n\n  –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                user.autobuy = False
                await sync_to_async(user.save)()
                task = user_autobuy_tasks.get(telegram_id)
                if task:
                    task.cancel()
                    del user_autobuy_tasks[telegram_id]
                
                # Send additional notification about autobuy stop
                try:
                    from bot.config import bot_instance
                    await bot_instance.send_message(
                        telegram_id,
                        f"‚õî –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ {MAX_FAILS} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫.\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –±–∞–ª–∞–Ω—Å."
                    )
                except Exception as notify_error:
                    logger.error(f"Failed to send autobuy stop notification to {telegram_id}: {notify_error}")

                # –£–¥–∞–ª—è–µ–º –∫–æ–ª–±—ç–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if telegram_id in autobuy_states:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º websocket_manager –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
                    from bot.utils.websocket_manager import websocket_manager

                    # Clean up price callbacks
                    for callback in autobuy_states[telegram_id]['price_callbacks']:
                        try:
                            symbol_to_unregister = user.pair.replace("/", "")
                            if symbol_to_unregister in websocket_manager.price_callbacks:
                                if callback in websocket_manager.price_callbacks[symbol_to_unregister]:
                                    websocket_manager.price_callbacks[symbol_to_unregister].remove(callback)
                        except Exception as cleanup_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ price –∫–æ–ª–±—ç–∫–æ–≤: {cleanup_error}")
                    
                    # Clean up bookTicker callbacks
                    for callback in autobuy_states[telegram_id]['bookticker_callbacks']:
                        try:
                            symbol_to_unregister = user.pair.replace("/", "")
                            await websocket_manager.unregister_bookticker_callback(symbol_to_unregister, callback)
                        except Exception as cleanup_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ bookTicker –∫–æ–ª–±—ç–∫–æ–≤: {cleanup_error}")
                    
                    del autobuy_states[telegram_id]

                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
                if session:
                    try:
                        await session.close()
                    except Exception as se:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {se}")

                break
            await asyncio.sleep(30)
    else:
        logger.error(f"–ê–≤—Ç–æ–±–∞–π –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è {telegram_id} –ø–æ—Å–ª–µ {MAX_FAILS} –ø–æ–ø—ã—Ç–æ–∫.")
        user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
        user.autobuy = False
        await sync_to_async(user.save)()
        task = user_autobuy_tasks.get(telegram_id)
        if task:
            task.cancel()
            del user_autobuy_tasks[telegram_id]
        
        # Send notification about autobuy failure
        try:
            from bot.config import bot_instance
            await bot_instance.send_message(
                telegram_id,
                f"‚õî –ê–≤—Ç–æ–±–∞–π –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ {MAX_FAILS} –ø–æ–ø—ã—Ç–æ–∫.\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        except Exception as notify_error:
            logger.error(f"Failed to send autobuy failure notification to {telegram_id}: {notify_error}")


async def process_buy(telegram_id: int, reason: str, message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from bot.utils.websocket_manager import websocket_manager

    logger.info(f"process_buy called for {telegram_id} with reason: {reason}")

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Lock –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    lock = asyncio.Lock()

    if not await lock.acquire():
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ - {telegram_id}")
        return

    try:
        # –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–±–∞–π
        user_active = await sync_to_async(User.objects.filter(telegram_id=telegram_id, autobuy=True).exists)()
        if not user_active:
            logger.info(f"–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –±–æ–ª—å—à–µ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–±–∞–π")
            return

        # –ü–æ–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        autobuy_states[telegram_id]['last_trade_time'] = time.time()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        autobuy_states[telegram_id]['waiting_for_opportunity'] = False
        autobuy_states[telegram_id]['restart_after'] = 0
        autobuy_states[telegram_id]['waiting_reported'] = False

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ - –í–°–ï–ì–î–ê —Å–≤–µ–∂–∏–µ –∏–∑ –ë–î
        client_session = None

        # –°—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
        consecutive_errors = autobuy_states[telegram_id].get('consecutive_errors', 0)

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if reason == "after_waiting_period":
                symbol = user.pair.replace("/", "")
                current_price = autobuy_states[telegram_id].get('current_price', 0)
                # await message.answer(f"üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–±–∞–π –¥–ª—è {symbol} –ø–æ—Å–ª–µ –ø–∞—É–∑—ã. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.6f} {symbol[3:]}")

            trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
            symbol = user.pair.replace("/", "")
            buy_amount = float(user.buy_amount)
            profit_percent = float(user.profit)
            pause_seconds = user.pause  # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏

            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É –¥–ª—è {telegram_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            buy_order = trade_client.new_order(symbol, "BUY", "MARKET", {"quoteOrderQty": buy_amount})
            handle_mexc_response(buy_order, "–ü–æ–∫—É–ø–∫–∞")
            order_id = buy_order["orderId"]

            # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞
            order_info = trade_client.query_order(symbol, {"orderId": order_id})
            logger.info(f"–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ {order_id}: {order_info}")

            executed_qty = float(order_info.get("executedQty", 0))
            if executed_qty == 0:
                await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (executedQty=0).")
                autobuy_states[telegram_id]['consecutive_errors'] = consecutive_errors + 1
                if autobuy_states[telegram_id]['consecutive_errors'] >= 3:
                    user.autobuy = False
                    await sync_to_async(user.save)()
                    await message.answer("‚õî –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤.")
                return

            spent = float(order_info["cummulativeQuoteQty"])
            if spent == 0:
                await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (spent=0).")
                autobuy_states[telegram_id]['consecutive_errors'] = consecutive_errors + 1
                if autobuy_states[telegram_id]['consecutive_errors'] >= 3:
                    user.autobuy = False
                    await sync_to_async(user.save)()
                    await message.answer("‚õî –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤.")
                return

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
            autobuy_states[telegram_id]['consecutive_errors'] = 0

            real_price = spent / executed_qty if executed_qty > 0 else 0

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ —Å—Ä–∞–∑—É
            autobuy_states[telegram_id]['last_buy_price'] = real_price

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –ø–æ–∫—É–ø–∫–∏
            logger.info(f"Buy triggered for {telegram_id} because of {reason}. New last_buy_price: {real_price}")

            # –†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –∏–∑ –ë–î
            user_settings = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
            profit_percent = float(user_settings.profit)
            sell_price = round(real_price * (1 + profit_percent / 100), 6)

            # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            sell_order = trade_client.new_order(symbol, "SELL", "LIMIT", {
                "quantity": executed_qty,
                "price": f"{sell_price:.6f}",
                "timeInForce": "GTC"
            })
            handle_mexc_response(sell_order, "–ü—Ä–æ–¥–∞–∂–∞")
            sell_order_id = sell_order["orderId"]
            logger.info(f"SELL –æ—Ä–¥–µ—Ä {sell_order_id} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {sell_price:.6f} {symbol[3:]}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–¥–µ—Ä –≤ –±–∞–∑—É
            last_number = await sync_to_async(Deal.objects.filter(user=user).count)()
            user_order_number = last_number + 1

            await sync_to_async(Deal.objects.create)(
                user=user,
                order_id=sell_order_id,
                user_order_number=user_order_number,
                symbol=symbol,
                buy_price=real_price,
                quantity=executed_qty,
                sell_price=sell_price,
                status="SELL_ORDER_PLACED",
                is_autobuy=True
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            order_info = {
                "order_id": sell_order_id,
                "buy_price": real_price,
                "notified": False,
                "user_order_number": user_order_number,
            }

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            active_orders = autobuy_states[telegram_id]['active_orders']
            active_orders.append(order_info)
            autobuy_states[telegram_id]['active_orders'] = active_orders

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏
            try:
                from bot.config import bot_instance
                await bot_instance.send_message(
                    telegram_id,
                    f"üü¢ *–°–î–ï–õ–ö–ê {user_order_number} –û–¢–ö–†–´–¢–ê*\n\n"
                    f"üìâ –ö—É–ø–ª–µ–Ω–æ –ø–æ: `{real_price:.6f}` {symbol[3:]}\n"
                    f"üì¶ –ö–æ–ª-–≤–æ: `{executed_qty:.6f}` {symbol[:3]}\n"
                    f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: `{spent:.2f}` {symbol[3:]}\n\n"
                    f"üìà –õ–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: `{sell_price:.6f}` {symbol[3:]}\n",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"Failed to send buy notification to {telegram_id}: {e}")
                # Fallback to message.answer if bot_instance fails
                try:
                    await message.answer(
                        f"üü¢ *–°–î–ï–õ–ö–ê {user_order_number} –û–¢–ö–†–´–¢–ê*\n\n"
                        f"üìâ –ö—É–ø–ª–µ–Ω–æ –ø–æ: `{real_price:.6f}` {symbol[3:]}\n"
                        f"üì¶ –ö–æ–ª-–≤–æ: `{executed_qty:.6f}` {symbol[:3]}\n"
                        f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: `{spent:.2f}` {symbol[3:]}\n\n"
                        f"üìà –õ–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: `{sell_price:.6f}` {symbol[3:]}\n",
                        parse_mode="Markdown"
                    )
                except Exception as fallback_error:
                    logger.error(f"Failed to send buy notification via fallback to {telegram_id}: {fallback_error}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Ä–æ—Å—Ç–µ –ø–æ—Å–ª–µ –ª—é–±–æ–π –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏
            if reason in ["price_rise", "price_drop", "new_buy_cycle", "initial_purchase", "after_waiting_period", "rise_trigger"]:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ bookTicker
                bookticker_data = websocket_manager.get_current_bookticker(symbol)
                if bookticker_data:
                    ask_price = float(bookticker_data['ask_price'])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ask —Ü–µ–Ω—É
                    current_time = time.time()
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ —Ä–æ—Å—Ç–µ –ø–æ ask —Ü–µ–Ω–µ
                    autobuy_states[telegram_id]['trigger_price'] = ask_price
                    autobuy_states[telegram_id]['trigger_time'] = current_time
                    autobuy_states[telegram_id]['is_rise_trigger'] = True
                    autobuy_states[telegram_id]['is_trigger_activated'] = False
                    autobuy_states[telegram_id]['trigger_activated_time'] = 0
                    autobuy_states[telegram_id]['pause_trend_prices'] = []
                    autobuy_states[telegram_id]['trend_only_rise'] = True
                    autobuy_states[telegram_id]['last_pause_price'] = None
                    
                    logger.info(f"Rise trigger set for {telegram_id} at ask price {ask_price:.6f} after {reason}")
                else:
                    logger.warning(f"Could not set rise trigger for {telegram_id}: no bookTicker data available")

            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ–∫—É–ø–∫–∞ –Ω–∞ —Ä–æ—Å—Ç–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—É–∑—É –ü–û–°–õ–ï –ø–æ–∫—É–ø–∫–∏
            if reason == "price_rise" and pause_seconds > 0:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
                autobuy_states[telegram_id]['waiting_for_opportunity'] = True
                autobuy_states[telegram_id]['restart_after'] = time.time() + pause_seconds
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞—É–∑–∞ {pause_seconds}—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Ä–æ—Å—Ç–µ –¥–ª—è {telegram_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {telegram_id}: {e}")
            error_message = parse_mexc_error(e)
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {error_message}")

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
            autobuy_states[telegram_id]['consecutive_errors'] = consecutive_errors + 1

            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–±–∞–π
            if autobuy_states[telegram_id]['consecutive_errors'] >= 3:
                user.autobuy = False
                await sync_to_async(user.save)()
                await message.answer("‚õî –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –±–∞–ª–∞–Ω—Å.")
                logger.warning(f"–ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {telegram_id} –ø–æ—Å–ª–µ 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫")

        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
            if client_session:
                try:
                    await client_session.close()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {telegram_id}: {e}")
        error_message = parse_mexc_error(e)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {error_message}")
    finally:
        # –í—Å–µ–≥–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        lock.release()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤ autobuy —á–µ—Ä–µ–∑ WebSocket
async def check_rise_triggers(telegram_id: int, symbol: str, bid_price: float, ask_price: float, is_rise: bool, current_time: float, user_settings: User):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Ç—Ä–µ–Ω–¥–∞.
    
    –ù–æ–≤–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞:
    1. –¢—Ä–∏–≥–≥–µ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏
    2. –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ - –∫–æ–≥–¥–∞ ask —Ü–µ–Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä (–≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑)
    3. –ù–∞—á–∞–ª–æ –æ—Ç—Å—á–µ—Ç–∞ –ø–∞—É–∑—ã - –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
    4. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã - —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –¢–û–õ–¨–ö–û —Ä–∞—Å—Ç–∏
    5. –°–±—Ä–æ—Å –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ - –µ—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑ ‚Üí —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
    6. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
    """
    try:
        if telegram_id not in autobuy_states:
            return

        state = autobuy_states[telegram_id]
        ask_price_float = float(ask_price)
        pause_seconds = user_settings.pause

        # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
        if state.get('is_rise_trigger') and state.get('trigger_price') is not None:
            trigger_price = state['trigger_price']
            is_activated = state.get('is_trigger_activated', False)
            
            # –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã)
            if not is_activated:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (—Ü–µ–Ω–∞ –ø–æ–¥–Ω—è–ª–∞—Å—å –≤—ã—à–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞)
                if ask_price_float > trigger_price:
                    # –¢—Ä–∏–≥–≥–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –ø–∞—É–∑—ã
                    state['is_trigger_activated'] = True
                    state['trigger_activated_time'] = current_time
                    state['pause_trend_prices'] = [ask_price_float]
                    state['trend_only_rise'] = True
                    state['last_pause_price'] = ask_price_float
                    
                    logger.info(f"Trigger activated for {telegram_id}: ask price {ask_price_float:.6f} crossed trigger {trigger_price:.6f}. Starting pause analysis.")
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
                    # from bot.config import bot_instance
                    # try:
                    #     await bot_instance.send_message(
                    #         telegram_id,
                    #         f"üîî –¢—Ä–∏–≥–≥–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol}\n\n"
                    #         f"üìà –¶–µ–Ω–∞ ({ask_price_float:.6f} USDC) –ø–µ—Ä–µ—Å–µ–∫–ª–∞ —Ç—Ä–∏–≥–≥–µ—Ä {trigger_price:.6f} USDC\n"
                    #         f"‚è±Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ {pause_seconds}—Å"
                    #     )
                    #     logger.info(f"Trigger activation notification sent to {telegram_id}")
                    # except Exception as e:
                    #     logger.error(f"Failed to send trigger activation notification to {telegram_id}: {e}")
                        
            # –≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
            else:
                triggered_time = state.get('trigger_activated_time', 0)
                last_pause_price = state.get('last_pause_price', ask_price_float)
                pause_prices = state.get('pause_trend_prices', [])
                trend_only_rise = state.get('trend_only_rise', True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—É–∑—ã
                pause_prices.append(ask_price_float)
                state['pause_trend_prices'] = pause_prices
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞–¥–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
                if ask_price_float < last_pause_price:
                    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞–¥–µ–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
                    trend_only_rise = False
                    state['trend_only_rise'] = False
                    
                    logger.info(f"Price drop detected during pause for {telegram_id}: {ask_price_float:.6f} < {last_pause_price:.6f}. Resetting trigger.")
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
                    # from bot.config import bot_instance
                    # try:
                    #     await bot_instance.send_message(
                    #         telegram_id,
                    #         f"üîª –¢—Ä–∏–≥–≥–µ—Ä —Å–±—Ä–æ—à–µ–Ω –¥–ª—è {symbol}\n\n"
                    #         f"üìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã\n"
                    #         f"üíî –¶–µ–Ω–∞ ({ask_price_float:.6f} USDC) —É–ø–∞–ª–∞ –Ω–∏–∂–µ {last_pause_price:.6f} USDC\n"
                    #         f"‚è≥ –û–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞"
                    #     )
                    #     logger.info(f"Trigger reset notification sent to {telegram_id}")
                    # except Exception as e:
                    #     logger.error(f"Failed to send trigger reset notification to {telegram_id}: {e}")
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
                    reset_rise_trigger(state)
                    return
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–∞—É–∑—ã
                state['last_pause_price'] = ask_price_float
                
                # –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞—É–∑—ã
                if current_time >= triggered_time + pause_seconds:
                    if trend_only_rise and ask_price_float > trigger_price:
                        # –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - —Å–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
                        logger.info(f"Rise conditions met for {telegram_id}: exclusive rise during {pause_seconds}s pause. Final price: {ask_price_float:.6f}")
                        
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
                        from bot.config import bot_instance
                        try:
                            await bot_instance.send_message(
                                telegram_id,
                                f"‚è´ –ü–æ–∫—É–ø–∫–∞ –ø–æ —Ä–æ—Å—Ç—É –¥–ª—è {symbol}\n\n"
                                f"üìà –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç {pause_seconds}—Å\n"
                                f"üéØ –¶–µ–Ω–∞: {trigger_price:.6f} ‚Üí {ask_price_float:.6f} USDC\n"
                                f"üí∞ –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É!"
                            )
                            logger.info(f"Rise purchase notification sent to {telegram_id}")
                        except Exception as e:
                            logger.error(f"Failed to send rise purchase notification to {telegram_id}: {e}")
                        
                        # –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
                        from bot.utils.autobuy_restart import FakeMessage
                        from bot.config import bot_instance
                        fake_message = FakeMessage(telegram_id, bot_instance)
                        asyncio.create_task(process_buy(telegram_id, "rise_trigger", fake_message, user_settings))
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ —Ç–µ–∫—É—â–µ–π ask —Ü–µ–Ω–µ
                        state['trigger_price'] = ask_price_float
                        state['trigger_time'] = current_time
                        state['is_trigger_activated'] = False
                        state['rise_buy_count'] += 1
                        
                        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—É–∑—ã
                        state['pause_trend_prices'] = []
                        state['trend_only_rise'] = True
                        state['last_pause_price'] = None
                        
                        logger.info(f"New rise trigger set for {telegram_id} at ask price {ask_price_float:.6f}")
                    else:
                        # –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
                        logger.info(f"Rise conditions NOT met for {telegram_id}. Final price: {ask_price_float:.6f}, trend_only_rise: {trend_only_rise}")
                        
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—É–∑—ã (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
                        # from bot.config import bot_instance
                        # try:
                        #     await bot_instance.send_message(
                        #         telegram_id,
                        #         f"‚ùå –£—Å–ª–æ–≤–∏—è —Ä–æ—Å—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è {symbol}\n\n"
                        #         f"üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—É–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω\n"
                        #         f"üìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞–¥–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã\n"
                        #         f"‚è≥ –û–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞"
                        #     )
                        #     logger.info(f"Failed rise conditions notification sent to {telegram_id}")
                        # except Exception as e:
                        #     logger.error(f"Failed to send failed conditions notification to {telegram_id}: {e}")
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
                        reset_rise_trigger(state)

    except Exception as e:
        logger.error(f"Error in check_rise_triggers for {telegram_id}: {e}", exc_info=True)


def reset_rise_trigger(state):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ —Ä–æ—Å—Ç–µ –∏ –æ—á–∏—â–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    state['is_rise_trigger'] = False
    state['trigger_price'] = None
    state['trigger_time'] = 0
    state['is_trigger_activated'] = False
    state['trigger_activated_time'] = 0
    state['pause_trend_prices'] = []
    state['trend_only_rise'] = True
    state['last_pause_price'] = None


async def process_order_update_for_autobuy(order_id, symbol, status, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–±–∞—è —á–µ—Ä–µ–∑ WebSocket"""
    if user_id not in autobuy_states:
        logger.debug(f"[AutobuyOrderUpdate] User {user_id} not in autobuy_states. Skipping.")
        return

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ —Å –ø–æ–ª–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    logger.info(f"[AutobuyOrderUpdate] User {user_id}: Processing order_id={order_id}, symbol={symbol}, status={status}. Current Autobuy State: {autobuy_states[user_id]}")

    active_orders = autobuy_states[user_id]['active_orders']
    old_last_buy_price = autobuy_states[user_id].get('last_buy_price')

    # –ò—â–µ–º –æ—Ä–¥–µ—Ä —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    order_index = next((i for i, order in enumerate(active_orders) if order["order_id"] == order_id), None)

    if order_index is not None:
        logger.info(f"[AutobuyOrderUpdate] User {user_id}: Found order {order_id} in active_orders at index {order_index}. Current active_orders: {active_orders}")
        if status in ["FILLED", "CANCELED"]:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ
            order_info = active_orders[order_index]
            logger.info(f"[AutobuyOrderUpdate] User {user_id}: Order {order_id} (UserOrderNum: {order_info.get('user_order_number')}) has status {status}. Removing from active_orders.")

            # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            active_orders.pop(order_index)
            autobuy_states[user_id]['active_orders'] = active_orders
            logger.info(f"[AutobuyOrderUpdate] User {user_id}: active_orders after removal: {autobuy_states[user_id]['active_orders']}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Ä–æ—Å—Ç–µ –ø–æ—Å–ª–µ –ö–ê–ñ–î–û–ô –ø—Ä–æ–¥–∞–∂–∏
            try:
                from bot.utils.websocket_manager import websocket_manager
                bookticker_data = websocket_manager.get_current_bookticker(symbol)
                if bookticker_data:
                    ask_price = float(bookticker_data['ask_price'])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ask —Ü–µ–Ω—É
                    current_time = time.time()
                    
                    autobuy_states[user_id]['trigger_price'] = ask_price
                    autobuy_states[user_id]['trigger_time'] = current_time
                    autobuy_states[user_id]['is_rise_trigger'] = True
                    autobuy_states[user_id]['is_trigger_activated'] = False
                    autobuy_states[user_id]['trigger_activated_time'] = 0
                    autobuy_states[user_id]['pause_trend_prices'] = []
                    autobuy_states[user_id]['trend_only_rise'] = True
                    autobuy_states[user_id]['last_pause_price'] = None
                    
                    logger.info(f"[AutobuyOrderUpdate] User {user_id}: Rise trigger set at ask price {ask_price:.6f} after order {order_id} filled")
                else:
                    logger.warning(f"[AutobuyOrderUpdate] User {user_id}: Could not set rise trigger - no bookTicker data")
            except Exception as e:
                logger.error(f"[AutobuyOrderUpdate] User {user_id}: Error setting rise trigger: {e}")

            # –ï—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–æ–π
            if not active_orders:
                logger.info(f"[AutobuyOrderUpdate] User {user_id}: No active orders remaining.")
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—É–∑—ã
                try:
                    user = await sync_to_async(User.objects.get)(telegram_id=user_id)
                    pause_seconds = user.pause

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
                    autobuy_states[user_id]['last_buy_price'] = None
                    autobuy_states[user_id]['waiting_for_opportunity'] = True
                    autobuy_states[user_id]['restart_after'] = time.time() + pause_seconds
                    autobuy_states[user_id]['waiting_reported'] = False

                    logger.info(f"[AutobuyOrderUpdate] User {user_id}: Reset last_buy_price to None. waiting_for_opportunity=True. Next buy possible after {pause_seconds}s (at {autobuy_states[user_id]['restart_after']}).")
                except Exception as e:
                    logger.error(f"[AutobuyOrderUpdate] User {user_id}: Error getting user settings for pause: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—É–∑—ã, –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º last_buy_price
                    autobuy_states[user_id]['last_buy_price'] = None
                    logger.info(f"[AutobuyOrderUpdate] User {user_id}: Reset last_buy_price to None (error case).")
            else:
                # –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_buy_price –ø–æ —Å–∞–º–æ–º—É —Å–≤–µ–∂–µ–º—É –æ—Ä–¥–µ—Ä—É
                most_recent_order = max(active_orders, key=lambda x: x.get("user_order_number", 0))
                autobuy_states[user_id]['last_buy_price'] = most_recent_order["buy_price"]
                logger.info(f"[AutobuyOrderUpdate] User {user_id}: Updated last_buy_price to {most_recent_order['buy_price']} from active order #{most_recent_order['user_order_number']}. Active orders count: {len(active_orders)}")
        else:
            logger.info(f"[AutobuyOrderUpdate] User {user_id}: Order {order_id} status is {status} (not FILLED/CANCELED). No state change.")
    else:
        logger.info(f"[AutobuyOrderUpdate] User {user_id}: Order {order_id} not found in active_orders. Current active_orders: {active_orders}")

    # –õ–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    new_last_buy_price = autobuy_states[user_id].get('last_buy_price')
    if old_last_buy_price != new_last_buy_price:
        logger.info(f"[AutobuyOrderUpdate] User {user_id}: last_buy_price changed from {old_last_buy_price} to {new_last_buy_price}.")
    elif status in ["FILLED", "CANCELED"] and order_index is not None:
        logger.info(f"[AutobuyOrderUpdate] User {user_id}: last_buy_price remains {new_last_buy_price} after processing order {order_id} ({status}).")


async def periodic_resource_check(telegram_id: int):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    while telegram_id in autobuy_states:
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞
            gc.collect()

            # –ñ—É—Ä–Ω–∞–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
            client_session_count = 0
            for obj in gc.get_objects():
                if 'ClientSession' in str(type(obj)):
                    client_session_count += 1

            if client_session_count > 5:  # –ü–æ—Ä–æ–≥ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {client_session_count} –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤.")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            current_time = time.time()
            restart_after = autobuy_states[telegram_id].get('restart_after', 0)
            waiting_for_opportunity = autobuy_states[telegram_id].get('waiting_for_opportunity', False)

            if waiting_for_opportunity and restart_after > 0 and current_time >= restart_after:
                logger.info(f"–ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫ –¥–ª—è {telegram_id} (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤)")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from bot.utils.websocket_manager import websocket_manager

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
            symbol = user.pair.replace("/", "")

            if not websocket_manager.market_connection:
                logger.warning(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket –¥–ª—è —Ä—ã–Ω–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è")
                await websocket_manager.connect_market_data()

            if symbol not in websocket_manager.market_subscriptions:
                logger.warning(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {symbol} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è")
                await websocket_manager.subscribe_market_data([symbol])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ periodic_resource_check –¥–ª—è {telegram_id}: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(30)
