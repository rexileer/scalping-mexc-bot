import asyncio
from aiogram.types import Message
from asgiref.sync import sync_to_async
from django.utils import timezone
from users.models import Deal, User
from subscriptions.models import Subscription
from bot.utils.user_autobuy_tasks import user_autobuy_tasks
from bot.utils.mexc import handle_mexc_response
from bot.utils.api_errors import parse_mexc_error
from mexc_sdk import Trade
from logger import logger
from decimal import Decimal
from bot.constants import MAX_FAILS
import json

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è autobuy –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
autobuy_states = {}  # {user_id: {'last_buy_price': float, 'active_orders': []}}

async def autobuy_loop(message: Message, telegram_id: int):
    startup_fail_count = 0

    while startup_fail_count < MAX_FAILS:
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º websocket_manager –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
            from bot.utils.websocket_manager import websocket_manager
            
            user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
            trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
            symbol = user.pair.replace("/", "")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if telegram_id not in autobuy_states:
                autobuy_states[telegram_id] = {
                    'active_orders': [],
                    'last_buy_price': None,
                    'current_price': None,
                    'price_callbacks': []
                }
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket
            await websocket_manager.connect_market_data([symbol])
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
            async def update_price_for_autobuy(symbol_name, price_str):
                price = float(price_str)
                autobuy_states[telegram_id]['current_price'] = price
                logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è autobuy {telegram_id}: {symbol_name} - {price}")
            
            autobuy_states[telegram_id]['price_callbacks'].append(update_price_for_autobuy)
            await websocket_manager.register_price_callback(symbol, update_price_for_autobuy)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –ë–î
            deals_qs = Deal.objects.filter(
                user=user,
                status__in=["SELL_ORDER_PLACED", "NEW", "PARTIALLY_FILLED"],
                is_autobuy=True
            ).order_by("-created_at")
            
            active_deals = await sync_to_async(list)(deals_qs)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            active_orders = []
            for deal in active_deals:
                active_orders.append({
                    "order_id": deal.order_id,
                    "buy_price": float(deal.buy_price),
                    "notified": False,
                    "user_order_number": deal.user_order_number,
                })
            
            autobuy_states[telegram_id]['active_orders'] = active_orders
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_buy_price –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            if active_orders:
                most_recent_order = max(active_orders, key=lambda x: x.get("user_order_number", 0))
                autobuy_states[telegram_id]['last_buy_price'] = most_recent_order["buy_price"]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ REST API –¥–ª—è –Ω–∞—á–∞–ª–∞
            ticker_data = trade_client.ticker_price(symbol)
            handle_mexc_response(ticker_data, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")
            current_price = float(ticker_data["price"])
            autobuy_states[telegram_id]['current_price'] = current_price

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ–±–∞—è
            fail_count = 0
            
            while True:
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                    subscription = await sync_to_async(
                        Subscription.objects.filter(user=user).order_by('-expires_at').first
                    )()
                    if not subscription or subscription.expires_at < timezone.now():
                        user.autobuy = False
                        await sync_to_async(user.save)()
                        task = user_autobuy_tasks.get(telegram_id)
                        if task:
                            task.cancel()
                            del user_autobuy_tasks[telegram_id]
                        await message.answer("‚õî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                        break
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
                    buy_amount = float(user.buy_amount)
                    profit_percent = float(user.profit)
                    loss_threshold = float(user.loss)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ WebSocket)
                    current_price = autobuy_states[telegram_id]['current_price']
                    last_buy_price = autobuy_states[telegram_id]['last_buy_price']
                    active_orders = autobuy_states[telegram_id]['active_orders']

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                    price_dropped = last_buy_price and ((last_buy_price - current_price) / last_buy_price * 100) >= loss_threshold
                    price_rose = last_buy_price and ((current_price - last_buy_price) / last_buy_price * 100) >= profit_percent

                    if not last_buy_price or price_dropped or price_rose:
                        if price_rose:
                            rise_percent = (current_price - last_buy_price) / last_buy_price * 100
                            await message.answer(
                                f"‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–æ—Å—Ç —Ü–µ–Ω—ã*\n\n"
                                f"üü¢ –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ `{rise_percent:.2f}%` –æ—Ç –ø–æ–∫—É–ø–∫–∏ –ø–æ `{last_buy_price:.6f}` {symbol[3:]}\n",
                                parse_mode="Markdown"
                            )
                            await asyncio.sleep(user.pause)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –Ω–∞ —Ä–æ—Å—Ç–µ
                        if price_dropped:
                            drop_percent = (last_buy_price - current_price) / last_buy_price * 100
                            await message.answer(
                                f"‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã*\n\n"
                                f"üîª –¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ `{drop_percent:.2f}%` –æ—Ç –ø–æ–∫—É–ø–∫–∏ –ø–æ `{last_buy_price:.6f}` {symbol[3:]}\n",
                                parse_mode="Markdown"
                            )
                            
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
                        buy_order = trade_client.new_order(symbol, "BUY", "MARKET", {"quoteOrderQty": buy_amount})
                        handle_mexc_response(buy_order, "–ü–æ–∫—É–ø–∫–∞")
                        order_id = buy_order["orderId"]

                        # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞
                        order_info = trade_client.query_order(symbol, {"orderId": order_id})
                        logger.info(f"–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ {order_id}: {order_info}")

                        executed_qty = float(order_info.get("executedQty", 0))
                        if executed_qty == 0:
                            await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (executedQty=0).")
                            continue

                        spent = float(order_info["cummulativeQuoteQty"])
                        if spent == 0:
                            await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (spent=0).")
                            continue
                        
                        real_price = spent / executed_qty if executed_qty > 0 else 0
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º last_buy_price –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                        autobuy_states[telegram_id]['last_buy_price'] = real_price
                        
                        # –†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
                        sell_price = round(real_price * (1 + profit_percent / 100), 6)
                        
                        # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                        sell_order = trade_client.new_order(symbol, "SELL", "LIMIT", {
                            "quantity": executed_qty,
                            "price": f"{sell_price:.6f}",
                            "timeInForce": "GTC"
                        })
                        handle_mexc_response(sell_order, "–ü—Ä–æ–¥–∞–∂–∞")
                        sell_order_id = sell_order["orderId"]
                        logger.info(f"SELL –æ—Ä–¥–µ—Ä {sell_order_id} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {sell_price:.6f} {symbol[3:]}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–¥–µ—Ä –≤ –±–∞–∑—É
                        last_number = await sync_to_async(Deal.objects.filter(user=user).count)()
                        user_order_number = last_number + 1
                        
                        await sync_to_async(Deal.objects.create)(
                            user=user,
                            order_id=sell_order_id,
                            user_order_number=user_order_number,
                            symbol=symbol,
                            buy_price=real_price,
                            quantity=executed_qty,
                            sell_price=sell_price,
                            status="SELL_ORDER_PLACED",
                            is_autobuy=True
                        )

                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                        order_info = {
                            "order_id": sell_order_id,
                            "buy_price": real_price,
                            "notified": False,
                            "user_order_number": user_order_number,
                        }
                        active_orders.append(order_info)
                        autobuy_states[telegram_id]['active_orders'] = active_orders

                        await message.answer(
                            f"üü¢ *–°–î–ï–õ–ö–ê {user_order_number} –û–¢–ö–†–´–¢–ê*\n\n"
                            f"üìâ –ö—É–ø–ª–µ–Ω–æ –ø–æ: `{real_price:.6f}` {symbol[3:]}\n"
                            f"üì¶ –ö–æ–ª-–≤–æ: `{executed_qty:.6f}` {symbol[:3]}\n"
                            f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: `{spent:.2f}` {symbol[3:]}\n\n"
                            f"üìà –õ–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: `{sell_price:.6f}` {symbol[3:]}\n",
                            parse_mode="Markdown"
                        )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ WebSocket
                    # –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã, —Ç–∞–∫ –∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    
                    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –ª–æ–≥–∏–∫–∏
                    await asyncio.sleep(2 if active_orders else user.pause)

                except asyncio.CancelledError:
                    raise
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ autobuy_loop –¥–ª—è {telegram_id}, –ø–∞—É–∑–∞ –∞–≤—Ç–æ–±–∞—è 30 —Å–µ–∫—É–Ω–¥: {e}")
                    fail_count += 1
                    if fail_count >= MAX_FAILS:
                        error_message = parse_mexc_error(e)
                        await message.answer(f"‚õî {error_message}\n\n  –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                        user.autobuy = False
                        await sync_to_async(user.save)()
                        task = user_autobuy_tasks.get(telegram_id)
                        if task:
                            task.cancel()
                            del user_autobuy_tasks[telegram_id]
                        
                        # –£–¥–∞–ª—è–µ–º –∫–æ–ª–±—ç–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        if telegram_id in autobuy_states:
                            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º websocket_manager –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
                            from bot.utils.websocket_manager import websocket_manager
                            
                            for callback in autobuy_states[telegram_id]['price_callbacks']:
                                symbol_to_unregister = user.pair.replace("/", "")
                                if symbol_to_unregister in websocket_manager.price_callbacks:
                                    if callback in websocket_manager.price_callbacks[symbol_to_unregister]:
                                        websocket_manager.price_callbacks[symbol_to_unregister].remove(callback)
                            del autobuy_states[telegram_id]
                        break
                    await asyncio.sleep(30)
            break

        except asyncio.CancelledError:
            logger.info(f"–ê–≤—Ç–æ–±–∞–π –¥–ª—è {telegram_id} –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
            user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
            user.autobuy = False
            await sync_to_async(user.save)()
            task = user_autobuy_tasks.get(telegram_id)
            if task:
                task.cancel()
                del user_autobuy_tasks[telegram_id]
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–ª–±—ç–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if telegram_id in autobuy_states:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º websocket_manager –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
                from bot.utils.websocket_manager import websocket_manager
                
                for callback in autobuy_states[telegram_id]['price_callbacks']:
                    symbol_to_unregister = user.pair.replace("/", "")
                    if symbol_to_unregister in websocket_manager.price_callbacks:
                        if callback in websocket_manager.price_callbacks[symbol_to_unregister]:
                            websocket_manager.price_callbacks[symbol_to_unregister].remove(callback)
                del autobuy_states[telegram_id]
            raise

        except Exception as e:
            startup_fail_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –≤ autobuy_loop –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–ª—è {telegram_id}: {e}")
            await asyncio.sleep(5)
    else:
        logger.error(f"–ê–≤—Ç–æ–±–∞–π –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è {telegram_id} –ø–æ—Å–ª–µ {MAX_FAILS} –ø–æ–ø—ã—Ç–æ–∫.")
        user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
        user.autobuy = False
        await sync_to_async(user.save)()
        task = user_autobuy_tasks.get(telegram_id)
        if task:
            task.cancel()
            del user_autobuy_tasks[telegram_id]


# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤ autobuy —á–µ—Ä–µ–∑ WebSocket
async def process_order_update_for_autobuy(order_id, symbol, status, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–±–∞—è —á–µ—Ä–µ–∑ WebSocket"""
    if user_id not in autobuy_states:
        return
    
    active_orders = autobuy_states[user_id]['active_orders']
    
    # –ò—â–µ–º –æ—Ä–¥–µ—Ä —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    order_index = next((i for i, order in enumerate(active_orders) if order["order_id"] == order_id), None)
    
    if order_index is not None:
        if status in ["FILLED", "CANCELED"]:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ
            order_info = active_orders[order_index]
            
            # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            active_orders.pop(order_index)
            autobuy_states[user_id]['active_orders'] = active_orders
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º last_buy_price
            if not active_orders:
                autobuy_states[user_id]['last_buy_price'] = None
                logger.info(f"Reset last_buy_price to None as no active orders remain for user {user_id}")
            else:
                # –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_buy_price –ø–æ —Å–∞–º–æ–º—É —Å–≤–µ–∂–µ–º—É –æ—Ä–¥–µ—Ä—É
                most_recent_order = max(active_orders, key=lambda x: x.get("user_order_number", 0))
                autobuy_states[user_id]['last_buy_price'] = most_recent_order["buy_price"]
                logger.info(f"Updated last_buy_price to {most_recent_order['buy_price']} for user {user_id} from order #{most_recent_order['user_order_number']}")
