import asyncio
from aiogram.types import Message
from asgiref.sync import sync_to_async
from django.utils import timezone
from users.models import Deal, User
from subscriptions.models import Subscription
from bot.utils.user_autobuy_tasks import user_autobuy_tasks
from bot.utils.mexc import handle_mexc_response
from bot.utils.api_errors import parse_mexc_error
from mexc_sdk import Trade
from logger import logger
from decimal import Decimal
from bot.constants import MAX_FAILS

async def autobuy_loop(message: Message, telegram_id: int):
    startup_fail_count = 0

    while startup_fail_count < MAX_FAILS:
        try:
            user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
            trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
            symbol = user.pair.replace("/", "")

            active_orders = []
            last_buy_price = None
            fail_count = 0

            while True:
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                    subscription = await sync_to_async(
                        Subscription.objects.filter(user=user).order_by('-expires_at').first
                    )()
                    if not subscription or subscription.expires_at < timezone.now():
                        user.autobuy = False
                        await sync_to_async(user.save)()
                        task = user_autobuy_tasks.get(telegram_id)
                        if task:
                            task.cancel()
                            del user_autobuy_tasks[telegram_id]
                        await message.answer("‚õî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                        break
                    user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
                    buy_amount = float(user.buy_amount)
                    profit_percent = float(user.profit)
                    loss_threshold = float(user.loss)
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                    ticker_data = trade_client.ticker_price(symbol)
                    handle_mexc_response(ticker_data, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")
                    current_price = float(ticker_data["price"])

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                    price_dropped = last_buy_price and ((last_buy_price - current_price) / last_buy_price * 100) >= loss_threshold
                    price_rose = last_buy_price and ((current_price - last_buy_price) / last_buy_price * 100) >= profit_percent

                    if not last_buy_price or price_dropped or price_rose:
                        if price_rose:
                            rise_percent = (current_price - last_buy_price) / last_buy_price * 100
                            await message.answer(
                                f"‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–æ—Å—Ç —Ü–µ–Ω—ã*\n\n"
                                f"üü¢ –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ `{rise_percent:.2f}%` –æ—Ç –ø–æ–∫—É–ø–∫–∏ –ø–æ `{last_buy_price:.6f}` {symbol[3:]}\n",
                                parse_mode="Markdown"
                            )
                            await asyncio.sleep(user.pause)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –Ω–∞ —Ä–æ—Å—Ç–µ
                        if price_dropped:
                            drop_percent = (last_buy_price - current_price) / last_buy_price * 100
                            await message.answer(
                                f"‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã*\n\n"
                                f"üîª –¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ `{drop_percent:.2f}%` –æ—Ç –ø–æ–∫—É–ø–∫–∏ –ø–æ `{last_buy_price:.6f}` {symbol[3:]}\n",
                                parse_mode="Markdown"
                            )
                        buy_order = trade_client.new_order(symbol, "BUY", "MARKET", {"quoteOrderQty": buy_amount})
                        handle_mexc_response(buy_order, "–ü–æ–∫—É–ø–∫–∞")
                        order_id = buy_order["orderId"]

                        # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞
                        order_info = trade_client.query_order(symbol, {"orderId": order_id})
                        logger.info(f"–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ {order_id}: {order_info}")

                        executed_qty = float(order_info.get("executedQty", 0))
                        if executed_qty == 0:
                            await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (executedQty=0).")
                            return

                        spent = float(order_info["cummulativeQuoteQty"])
                        if spent == 0:
                            await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (spent=0).")
                            return
                        
                        real_price = spent / executed_qty if executed_qty > 0 else 0
                        
                        # –†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
                        sell_price = round(real_price * (1 + profit_percent / 100), 6)
                        last_buy_price = real_price

                        # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                        sell_order = trade_client.new_order(symbol, "SELL", "LIMIT", {
                            "quantity": executed_qty,
                            "price": f"{sell_price:.6f}",
                            "timeInForce": "GTC"
                        })
                        handle_mexc_response(sell_order, "–ü—Ä–æ–¥–∞–∂–∞")
                        sell_order_id = sell_order["orderId"]
                        logger.info(f"SELL –æ—Ä–¥–µ—Ä {sell_order_id} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {sell_price:.6f} {symbol[3:]}")
                        sell_order_info = trade_client.query_order(symbol, {"orderId": sell_order_id})

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–¥–µ—Ä –≤ –±–∞–∑—É
                        last_number = await sync_to_async(Deal.objects.filter(user=user).count)()
                        user_order_number = last_number + 1
                        
                        await sync_to_async(Deal.objects.create)(
                            user=user,
                            order_id=sell_order_id,
                            user_order_number=user_order_number,
                            symbol=symbol,
                            buy_price=real_price,
                            quantity=executed_qty,
                            sell_price=sell_price,
                            status="SELL_ORDER_PLACED",
                            is_autobuy=True
                        )

                        active_orders.append({
                            "order_id": sell_order_id,
                            "buy_price": real_price,
                            "notified": False,
                            "user_order_number": user_order_number,
                        })

                        await message.answer(
                            f"üü¢ *–°–î–ï–õ–ö–ê {user_order_number} –û–¢–ö–†–´–¢–ê*\n\n"
                            f"üìâ –ö—É–ø–ª–µ–Ω–æ –ø–æ: `{real_price:.6f}` {symbol[3:]}\n"
                            f"üì¶ –ö–æ–ª-–≤–æ: `{executed_qty:.6f}` {symbol[:3]}\n"
                            f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: `{spent:.2f}` {symbol[3:]}\n\n"
                            f"üìà –õ–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: `{sell_price:.6f}` {symbol[3:]}",
                            parse_mode="Markdown"
                        )

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                    still_active = []
                    orders_changed = False
                    for sell_order_info in active_orders:
                        result = await monitor_order_autobuy(
                            message=message,
                            trade_client=trade_client,
                            symbol=symbol,
                            order_info=sell_order_info,
                        )
                        if result == "ACTIVE":
                            still_active.append(sell_order_info)
                        else:
                            orders_changed = True
                            
                    active_orders = still_active
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ last_buy_price
                    if orders_changed:
                        if active_orders:
                            most_recent_order = max(active_orders, key=lambda x: x.get("user_order_number", 0))
                            last_buy_price = most_recent_order["buy_price"]
                            logger.info(f"Updated last_buy_price to {last_buy_price} from order #{most_recent_order['user_order_number']}")
                        else:
                            last_buy_price = None
                            logger.info("Reset last_buy_price to None as no active orders remain")
                            
                    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    short_check_interval = 2  # —Å–µ–∫ ‚Äî —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤

                    if not active_orders:
                        last_buy_price = None
                        logger.info(f"–ü–∞—É–∑–∞ –∞–≤—Ç–æ–±–∞—è –¥–ª—è —é–∑–µ—Ä–∞ {telegram_id}: {user.pause} —Å–µ–∫—É–Ω–¥ ")
                        await asyncio.sleep(user.pause)
                    await asyncio.sleep(short_check_interval if active_orders else user.pause)

                except asyncio.CancelledError:
                    raise
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ autobuy_loop –¥–ª—è {telegram_id}, –ø–∞—É–∑–∞ –∞–≤—Ç–æ–±–∞—è 30 —Å–µ–∫—É–Ω–¥: {e}")
                    fail_count += 1
                    if fail_count >= MAX_FAILS:
                        error_message = parse_mexc_error(e)
                        await message.answer(f"‚õî {error_message}\n\n  –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                        user.autobuy = False
                        await sync_to_async(user.save)()
                        task = user_autobuy_tasks.get(telegram_id)
                        if task:
                            task.cancel()
                            del user_autobuy_tasks[telegram_id]
                        break
                    await asyncio.sleep(30)
            break

        except asyncio.CancelledError:
            logger.info(f"–ê–≤—Ç–æ–±–∞–π –¥–ª—è {telegram_id} –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
            user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
            user.autobuy = False
            await sync_to_async(user.save)()
            task = user_autobuy_tasks.get(telegram_id)
            if task:
                task.cancel()
                del user_autobuy_tasks[telegram_id]
            raise

        except Exception as e:
            startup_fail_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –≤ autobuy_loop –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–ª—è {telegram_id}: {e}")
            await asyncio.sleep(5)
    else:
        logger.error(f"–ê–≤—Ç–æ–±–∞–π –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è {telegram_id} –ø–æ—Å–ª–µ {MAX_FAILS} –ø–æ–ø—ã—Ç–æ–∫.")
        user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
        user.autobuy = False
        await sync_to_async(user.save)()
        task = user_autobuy_tasks.get(telegram_id)
        if task:
            task.cancel()
            del user_autobuy_tasks[telegram_id]



async def monitor_order_autobuy(
    message: Message,
    trade_client: Trade,
    symbol: str,
    order_info: dict,
    max_retries: int = 5,
    retry_delay: int = 5,
):
    order_id = order_info["order_id"]
    buy_price = order_info["buy_price"]
    user_order_number = order_info.get("user_order_number")

    if order_info.get("notified") is None:
        order_info["notified"] = False

    for attempt in range(1, max_retries + 1):
        try:
            order_status = trade_client.query_order(symbol, options={"orderId": order_id})
            handle_mexc_response(order_status, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–∞")
            status = order_status.get("status")

            if status == "CANCELED":
                deal = await sync_to_async(Deal.objects.get)(order_id=order_id)
                deal.status = "CANCELED"
                deal.updated_at = timezone.now()
                await sync_to_async(deal.save)()

                await message.answer(
                    f"‚ùå *–°–î–ï–õ–ö–ê {user_order_number} –û–¢–ú–ï–ù–ï–ù–ê*\n\n"
                    f"üì¶ –ö–æ–ª-–≤–æ: `{deal.quantity:.6f}` {deal.symbol[:3]}\n"
                    f"üí∞ –ö—É–ø–ª–µ–Ω–æ –ø–æ: `{deal.buy_price:.6f}` {deal.symbol[3:]}\n"
                    f"üìà –ü—Ä–æ–¥–∞–∂–∞: `{deal.quantity:.4f}` {deal.symbol[:3]} –ø–æ {deal.sell_price:.6f} {deal.symbol[3:]}\n",
                    parse_mode="Markdown"
                )
                return "CANCELED"
            
            if status == "FILLED":
                deal = await sync_to_async(Deal.objects.get)(order_id=order_id)
                deal.status = "FILLED"
                deal.updated_at = timezone.now()
                await sync_to_async(deal.save)()

                total_received = Decimal(order_status.get("cummulativeQuoteQty", 0))
                quantity = Decimal(order_status.get("executedQty", 0))
                sell_price = total_received / quantity if quantity else 0
                profit = total_received - (deal.buy_price * quantity)

                await message.answer(
                    f"‚úÖ *–°–î–ï–õ–ö–ê {user_order_number} –ó–ê–í–ï–†–®–ï–ù–ê*\n\n"
                    f"üì¶ –ö–æ–ª-–≤–æ: `{quantity:.6f}` {symbol[:3]}\n"
                    f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ –ø–æ: `{sell_price:.6f}` {symbol[3:]}\n"
                    f"üìä –ü—Ä–∏–±—ã–ª—å: `{profit:.2f}` {symbol[3:]}",
                    parse_mode="Markdown"
                )
                return "FILLED"

            return "ACTIVE"

        except asyncio.CancelledError:
            return "CANCELLED"
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries} ‚Äî –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
            if attempt < max_retries:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥.")
                await asyncio.sleep(retry_delay)
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ {order_id} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                error_message = parse_mexc_error(e)
                user_message = f"‚ùå {error_message}"
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ä–¥–µ—Ä–∞ {user_order_number}:")
                await message.answer(user_message)
                return "ACTIVE"
