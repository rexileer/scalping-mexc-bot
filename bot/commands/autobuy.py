import asyncio
from aiogram.types import Message
from asgiref.sync import sync_to_async
from django.utils import timezone
from users.models import Deal, User
from subscriptions.models import Subscription
from bot.utils.user_autobuy_tasks import user_autobuy_tasks
from bot.utils.mexc import handle_mexc_response
from mexc_sdk import Trade
from logger import logger
from decimal import Decimal

MAX_FAILS = 5 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–±–∞—è

async def autobuy_loop(message: Message, telegram_id: int):
    try:
        user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
        trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
        symbol = user.pair.replace("/", "")
        buy_amount = float(user.buy_amount)
        profit_percent = float(user.profit)
        loss_threshold = float(user.loss)

        active_orders = []
        last_buy_price = None
        fail_count = 0

        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
                subscription = await sync_to_async(
                    Subscription.objects.filter(user=user).order_by('-expires_at').first
                )()
                if not subscription or subscription.expires_at < timezone.now():
                    user.autobuy = False
                    await sync_to_async(user.save)()
                    task = user_autobuy_tasks.get(telegram_id)
                    if task:
                        task.cancel()
                        del user_autobuy_tasks[telegram_id]
                    await message.answer("‚õî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    break

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                ticker_data = trade_client.ticker_price(symbol)
                handle_mexc_response(ticker_data, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")
                current_price = float(ticker_data["price"])

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                price_dropped = last_buy_price and ((last_buy_price - current_price) / last_buy_price * 100) >= loss_threshold
                if not last_buy_price or price_dropped:
                    buy_order = trade_client.new_order(symbol, "BUY", "MARKET", {"quoteOrderQty": buy_amount})
                    handle_mexc_response(buy_order, "–ü–æ–∫—É–ø–∫–∞")
                    order_id = buy_order["orderId"]

                    # 2. –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ query_order
                    order_info = trade_client.query_order(symbol, {"orderId": order_id})
                    logger.info(f"–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ {order_id}: {order_info}")

                    executed_qty = float(order_info.get("executedQty", 0))
                    if executed_qty == 0:
                        await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (executedQty=0).")
                        return

                    spent = float(order_info["cummulativeQuoteQty"])  # 0.999371
                    if spent == 0:
                        await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (spent=0).")
                        return
                    
                    real_price = spent / executed_qty if executed_qty > 0 else 0
                    
                    # 4. –°—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
                    profit_percent = float(user.profit)
                    sell_price = round(real_price * (1 + profit_percent / 100), 6)
                    last_buy_price = real_price

                    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                    sell_order = trade_client.new_order(symbol, "SELL", "LIMIT", {
                        "quantity": executed_qty,
                        "price": f"{sell_price:.6f}",
                        "timeInForce": "GTC"
                    })
                    handle_mexc_response(sell_order, "–ü—Ä–æ–¥–∞–∂–∞")
                    sell_order_id = sell_order["orderId"]
                    logger.info(f"SELL –æ—Ä–¥–µ—Ä {sell_order_id} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {sell_price:.6f} {symbol[3:]}")
                    sell_order_info = trade_client.query_order(symbol, {"orderId": sell_order_id})
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–¥–µ—Ä –≤ –±–∞–∑—É
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä
                    last_number = await sync_to_async(
                        lambda: Deal.objects.filter(user=user).count()
                    )()
                    user_order_number = last_number + 1
                    
                    await sync_to_async(Deal.objects.create)(
                        user=user,
                        order_id=sell_order_id,
                        user_order_number=user_order_number,
                        symbol=symbol,
                        buy_price=real_price,
                        quantity=executed_qty,
                        sell_price=sell_price,
                        status="SELL_ORDER_PLACED",
                        is_autobuy=True
                    )

                    active_orders.append({
                        "order_id": sell_order_id,
                        "buy_price": real_price,
                        "notified": False,
                        "user_order_number": user_order_number,
                    })

                    await message.answer(
                        f"üü¢ *–°–î–ï–õ–ö–ê {user_order_number} –û–¢–ö–†–´–¢–ê*\n\n"
                        f"üìâ –ö—É–ø–ª–µ–Ω–æ –ø–æ: `{real_price:.6f}` {symbol[3:]}\n"
                        f"üì¶ –ö–æ–ª-–≤–æ: `{executed_qty:.4f}` {symbol[:3]}\n"
                        f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: `{spent:.2f}` {symbol[3:]}\n\n"
                        f"üìà –õ–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: `{sell_price:.6f}` {symbol[3:]}",
                        parse_mode="Markdown"
                    )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                still_active = []
                for sell_order_info in active_orders:
                    result = await monitor_order_autobuy(
                        message=message,
                        trade_client=trade_client,
                        symbol=symbol,
                        order_info=sell_order_info,
                        telegram_id=telegram_id,
                        loss_threshold=loss_threshold,
                    )
                    if result == "ACTIVE":
                        still_active.append(sell_order_info)
                active_orders = still_active

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                short_check_interval = 7  # —Å–µ–∫ ‚Äî —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤

                if not active_orders:
                    last_buy_price = None
                    logger.info(f"–ü–∞—É–∑–∞ –∞–≤—Ç–æ–±–∞—è –¥–ª—è —é–∑–µ—Ä–∞ {telegram_id}: {user.pause} —Å–µ–∫—É–Ω–¥ ")
                    await asyncio.sleep(user.pause)
                # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ü–æ–º —Ü–∏–∫–ª–∞:
                await asyncio.sleep(short_check_interval if active_orders else user.pause)
            except asyncio.CancelledError:
                raise
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ autobuy_loop –¥–ª—è {telegram_id}: {e}")
                await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ AutoBuy: {e}")
                fail_count += 1
                if fail_count >= MAX_FAILS:
                    await message.answer("‚õî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ. –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    user.autobuy = False
                    await sync_to_async(user.save)()
                    task = user_autobuy_tasks.get(telegram_id)
                    if task:
                        task.cancel()
                        del user_autobuy_tasks[telegram_id]
                    break
                await asyncio.sleep(30)
                continue

    except asyncio.CancelledError:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ autobuy_loop –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–ª—è {telegram_id}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ AutoBuy: {e}")



async def monitor_order_autobuy(
    message: Message,
    trade_client: Trade,
    symbol: str,
    order_info: dict,
    telegram_id: int,
    loss_threshold: float,
):
    try:
        order_id = order_info["order_id"]
        buy_price = order_info["buy_price"]
        user_order_number = order_info.get("user_order_number")
        if order_info.get("notified") is None:
            order_info["notified"] = False

        order_status = trade_client.query_order(symbol, options={"orderId": order_id})
        handle_mexc_response(order_status, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–∞")
        status = order_status.get("status")

        if status == "CANCELED":
            deal = await sync_to_async(Deal.objects.get)(order_id=order_id)
            deal.status = "CANCELED"
            deal.updated_at = timezone.now()
            await sync_to_async(deal.save)()

            await message.answer(
                f"‚ùå *–°–î–ï–õ–ö–ê {user_order_number} –û–¢–ú–ï–ù–ï–ù–ê*\n\n"
                f"üì¶ –ö–æ–ª-–≤–æ: `{deal.quantity:.4f}` {deal.symbol[:3]}\n"
                f"üí∞ –ö—É–ø–ª–µ–Ω–æ –ø–æ: `{deal.buy_price:.6f}` {deal.symbol[3:]}\n"
                f"üìà –ü—Ä–æ–¥–∞–∂–∞: `{deal.quantity:.4f}` {deal.symbol[:3]} –ø–æ {deal.sell_price:.6f} {deal.symbol[3:]}\n",
                parse_mode="Markdown"
            )
            return "CANCELED"
        
        if status == "FILLED":
            deal = await sync_to_async(Deal.objects.get)(order_id=order_id)
            deal.status = "FILLED"
            deal.updated_at = timezone.now()
            await sync_to_async(deal.save)()

            total_received = Decimal(order_status.get("cummulativeQuoteQty", 0))
            quantity = Decimal(order_status.get("executedQty", 0))
            sell_price = total_received / quantity if quantity else 0
            profit = total_received - (deal.buy_price * quantity)

            await message.answer(
                f"‚úÖ *–°–î–ï–õ–ö–ê {user_order_number} –ó–ê–í–ï–†–®–ï–ù–ê*\n\n"
                f"üì¶ –ö–æ–ª-–≤–æ: `{quantity:.4f}` {symbol[:3]}\n"
                f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ –ø–æ: `{sell_price:.6f}` {symbol[3:]}\n"
                f"üìä –ü—Ä–∏–±—ã–ª—å: `{profit:.2f}` {symbol[3:]}",
                parse_mode="Markdown"
            )
            return "FILLED"

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã
        price_data = trade_client.ticker_price(symbol)
        handle_mexc_response(price_data, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã")
        current_price = float(price_data["price"])
        drop_percent = ((buy_price - current_price) / buy_price) * 100
        logger.info(f"–ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {order_id}: {drop_percent:.2f}%")

        if drop_percent >= loss_threshold and not order_info["notified"]:
            await message.answer(
                f"‚ö†Ô∏è *–ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –æ—Ä–¥–µ—Ä—É*\n\n"
                f"üìâ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{current_price:.6f}` {symbol[3:]}\n"
                f"üîª –ü–∞–¥–µ–Ω–∏–µ: `{drop_percent:.2f}%`\n",
                parse_mode="Markdown"
            )
            order_info["notified"] = True

        return "ACTIVE"

    except asyncio.CancelledError:
        return "CANCELLED"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
        return "ACTIVE"
