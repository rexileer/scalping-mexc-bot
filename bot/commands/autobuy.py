import asyncio
from aiogram.types import Message
from asgiref.sync import sync_to_async
from django.utils import timezone
from users.models import Deal, User
from logger import logger
from subscriptions.models import Subscription
from bot.utils.user_autobuy_tasks import user_autobuy_tasks

from mexc_sdk import Trade

async def autobuy_loop(message: Message, telegram_id: int):
    try:
        user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
        trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
        # –†–∞–±–æ—Ç–∞–µ–º —Å –ø–∞—Ä–æ–π —Ç–∞–∫, –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "KAS/USDT")
        symbol = user.pair.replace("/", "")
        buy_amount = float(user.buy_amount)
        profit_percent = float(user.profit)
        loss_threshold = float(user.loss)

        active_orders = []  # —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö
        last_buy_price = None

        while True:
            user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
            subscription = await sync_to_async(Subscription.objects.filter(user=user).order_by('-end_date').first)()

            if not subscription or subscription.expires_at < timezone.now():
                user.autobuy = False
                await sync_to_async(user.save)()

                # –£–¥–∞–ª–∏–º –∑–∞–¥–∞—á—É –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                task = user_autobuy_tasks.get(telegram_id)
                if task:
                    task.cancel()
                    del user_autobuy_tasks[telegram_id]

                await message.answer("‚õî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                logger.info(f"Autobuy stopped for {telegram_id} due to expired subscription")
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            
            current_price = float(trade_client.ticker_price(symbol)['price'])

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏
            if not last_buy_price or ((last_buy_price - current_price) / last_buy_price * 100) >= loss_threshold:
                # –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É –ø–æ —Ä—ã–Ω–∫—É –Ω–∞ —Å—É–º–º—É buy_amount
                buy_order = trade_client.new_order(symbol, "BUY", "MARKET", {"quoteOrderQty": buy_amount})
                executed_qty = float(buy_order["executedQty"])
                avg_price = float(buy_order["fills"][0]["price"])
                spent = executed_qty * avg_price

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏
                last_buy_price = avg_price

                # –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª—å—é
                sell_price = round(avg_price * (1 + profit_percent / 100), 6)

                # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                sell_order = trade_client.new_order(symbol, "SELL", "LIMIT", {
                    "quantity": executed_qty,
                    "price": f"{sell_price:.6f}",
                    "timeInForce": "GTC"
                })

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É —Å —Ñ–ª–∞–≥–æ–º, —á—Ç–æ –æ–Ω–∞ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞
                deal = await sync_to_async(Deal.objects.create)(
                    user=user,
                    order_id=sell_order['orderId'],
                    symbol=symbol,
                    buy_price=avg_price,
                    quantity=executed_qty,
                    sell_price=sell_price,
                    status="SELL_ORDER_PLACED",
                    is_autobuy=True
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                active_orders.append({
                    "order_id": sell_order['orderId'],
                    "buy_price": avg_price,
                    "notified": False  # —Ñ–ª–∞–≥, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏—à—å –æ–¥–∏–Ω —Ä–∞–∑
                })

                await message.answer(
                    f"‚úÖ –ö–£–ü–õ–ï–ù–û\n\n{executed_qty:.2f} {symbol[:-4]} –ø–æ {avg_price:.6f} USDT\n"
                    f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent:.6f} USDT\n\nüìà –ü—Ä–æ–¥–∞–∂–∞ –ø–æ {sell_price:.6f} USDT"
                )
                logger.info(f"BUY + SELL for {user.telegram_id}: {executed_qty} {symbol} @ {avg_price} -> {sell_price}")

            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä
            still_active = []
            for order_info in active_orders:
                result = await monitor_order_autobuy(message, trade_client, symbol, order_info, telegram_id, loss_threshold)
                if result == "ACTIVE":
                    still_active.append(order_info)
            active_orders = still_active

            # –ï—Å–ª–∏ –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–æ–π
            if not active_orders:
                await asyncio.sleep(user.pause)
            else:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö —á–∞—â–µ
                await asyncio.sleep(60)

    except asyncio.CancelledError:
        logger.info(f"Autobuy cancelled for {telegram_id}")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ autobuy_loop –¥–ª—è {telegram_id}: {e}")
        await asyncio.sleep(30)


async def monitor_order_autobuy(message: Message, trade_client: Trade, symbol: str, order_info: dict, telegram_id: int, loss_threshold: float):
    try:
        order_id = order_info["order_id"]
        buy_price = order_info["buy_price"]
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤ order_info, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if order_info.get("notified") is None:
            order_info["notified"] = False

        order_status = trade_client.query_order(symbol, options={"orderId": order_id})
        status = order_status.get("status")

        if status == "FILLED":
            deal = await sync_to_async(Deal.objects.get)(order_id=order_id)
            deal.status = "FILLED"
            deal.updated_at = timezone.now()
            await sync_to_async(deal.save)()
            await message.answer(f"‚úÖ –°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞! –û—Ä–¥–µ—Ä {order_id} –∑–∞–∫—Ä—ã—Ç.")
            return "FILLED"

        current_price = float(trade_client.ticker_price(symbol)['price'])
        drop_percent = ((buy_price - current_price) / buy_price) * 100

        if drop_percent >= loss_threshold and not order_info["notified"]:
            await message.answer(
                f"‚ö†Ô∏è –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ {drop_percent:.2f}% –æ—Ç –ø–æ–∫—É–ø–∫–∏ ({current_price:.6f} {symbol[-4:]}) –ø–æ –æ—Ä–¥–µ—Ä—É {order_id}."
            )
            order_info["notified"] = True

        return "ACTIVE"

    except asyncio.CancelledError:
        logger.info(f"Monitor cancelled for order {order_id}, user {telegram_id}")
        return "CANCELLED"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ autobuy –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
        return "ACTIVE"
