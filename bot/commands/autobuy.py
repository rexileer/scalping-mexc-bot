import asyncio
from aiogram.types import Message
from asgiref.sync import sync_to_async
from django.utils import timezone
from users.models import Deal, User
from subscriptions.models import Subscription
from bot.utils.user_autobuy_tasks import user_autobuy_tasks
from bot.utils.mexc import handle_mexc_response
from bot.utils.api_errors import parse_mexc_error
from mexc_sdk import Trade
from logger import logger
from decimal import Decimal
from bot.constants import MAX_FAILS
import json
import time
import weakref
import gc

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è autobuy –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
autobuy_states = {}  # {user_id: {'last_buy_price': float, 'active_orders': [], etc.}}

async def autobuy_loop(message: Message, telegram_id: int):
    startup_fail_count = 0
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º lock –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫
    buy_lock = asyncio.Lock()
    
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = None
    
    while startup_fail_count < MAX_FAILS:
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º websocket_manager –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
            from bot.utils.websocket_manager import websocket_manager
            
            user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
            trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
            symbol = user.pair.replace("/", "")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if telegram_id not in autobuy_states:
                autobuy_states[telegram_id] = {
                    'active_orders': [],
                    'last_buy_price': None,
                    'current_price': None,
                    'price_callbacks': [],
                    'last_trade_time': 0,
                    'is_ready': False,
                    'waiting_for_opportunity': False,  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                    'restart_after': 0,  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫
                    'waiting_reported': False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —Å–æ–æ–±—â–∏–ª–∏ –ª–∏ –º—ã –æ —Ç–æ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º
                }
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –ë–î
            deals_qs = Deal.objects.filter(
                user=user,
                status__in=["SELL_ORDER_PLACED", "NEW", "PARTIALLY_FILLED"],
                is_autobuy=True
            ).order_by("-created_at")
            
            active_deals = await sync_to_async(list)(deals_qs)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            active_orders = []
            for deal in active_deals:
                active_orders.append({
                    "order_id": deal.order_id,
                    "buy_price": float(deal.buy_price),
                    "notified": False,
                    "user_order_number": deal.user_order_number,
                })
            
            autobuy_states[telegram_id]['active_orders'] = active_orders
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_buy_price –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            if active_orders:
                most_recent_order = max(active_orders, key=lambda x: x.get("user_order_number", 0))
                autobuy_states[telegram_id]['last_buy_price'] = most_recent_order["buy_price"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if symbol not in websocket_manager.market_subscriptions:
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
                await websocket_manager.connect_market_data([symbol])
                logger.info(f"–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –¥–ª—è {symbol}")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
            async def update_price_for_autobuy(symbol_name, price_str):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–±–∞–π
                    user_data = await sync_to_async(User.objects.filter(telegram_id=telegram_id, autobuy=True).exists)()
                    if not user_data:
                        logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ü–µ–Ω—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –±–æ–ª—å—à–µ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–±–∞–π")
                        return
                        
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ
                    price = float(price_str)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    old_price = autobuy_states[telegram_id]['current_price']
                    autobuy_states[telegram_id]['current_price'] = price
                    
                    # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É - –≤—ã—Ö–æ–¥–∏–º
                    if not autobuy_states[telegram_id].get('is_ready', False) or buy_lock.locked():
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
                    current_time = time.time()
                    restart_after = autobuy_states[telegram_id].get('restart_after', 0)
                    waiting_for_opportunity = autobuy_states[telegram_id].get('waiting_for_opportunity', False)
                    
                    if waiting_for_opportunity and restart_after > 0:
                        if current_time < restart_after:
                            # –ï—â–µ –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏ - –ª–æ–≥ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                            if not autobuy_states[telegram_id].get('waiting_reported', False):
                                wait_time = restart_after - current_time
                                logger.info(f"–û–∂–∏–¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {telegram_id}. –û—Å—Ç–∞–ª–æ—Å—å {wait_time:.1f} —Å–µ–∫—É–Ω–¥.")
                                autobuy_states[telegram_id]['waiting_reported'] = True
                            return
                        else:
                            # –í—Ä–µ–º—è –≤—ã—à–ª–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
                            autobuy_states[telegram_id]['restart_after'] = 0
                            autobuy_states[telegram_id]['waiting_for_opportunity'] = False
                            autobuy_states[telegram_id]['waiting_reported'] = False
                            logger.info(f"–ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ –∏—Å—Ç–µ–∫ –¥–ª—è {telegram_id}, —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏")
                            
                            # –°—Ä–∞–∑—É –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                            user_settings = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
                            await message.answer(f"üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–±–∞–π –ø–æ—Å–ª–µ –ø–∞—É–∑—ã. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}")
                            asyncio.create_task(process_buy(telegram_id, "after_waiting_period", message, user_settings))
                            return
                        
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    last_buy_price = autobuy_states[telegram_id]['last_buy_price']
                    user_settings = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ –∏ –Ω–µ –∂–¥–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ - —ç—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞
                    if not last_buy_price and not waiting_for_opportunity:
                        asyncio.create_task(process_buy(telegram_id, "initial_purchase", message, user_settings))
                        return
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ (–≤—Å–µ –∑–∞–∫—Ä—ã–ª–∏—Å—å) –∏ –Ω–µ –∂–¥–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –Ω–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –∑–∞–Ω–æ–≤–æ
                    active_orders = autobuy_states[telegram_id]['active_orders']
                    if not active_orders and not waiting_for_opportunity and not last_buy_price:
                        asyncio.create_task(process_buy(telegram_id, "new_cycle", message, user_settings))
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞
                    if last_buy_price:
                        loss_threshold = float(user_settings.loss)
                        profit_percent = float(user_settings.profit)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã
                        if ((last_buy_price - price) / last_buy_price * 100) >= loss_threshold:
                            drop_percent = (last_buy_price - price) / last_buy_price * 100
                            await message.answer(
                                f"‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã*\n\n"
                                f"üîª –¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ `{drop_percent:.2f}%` –æ—Ç –ø–æ–∫—É–ø–∫–∏ –ø–æ `{last_buy_price:.6f}` {symbol[3:]}\n",
                                parse_mode="Markdown"
                            )
                            asyncio.create_task(process_buy(telegram_id, "price_drop", message, user_settings))
                            
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ—Å—Ç —Ü–µ–Ω—ã
                        elif ((price - last_buy_price) / last_buy_price * 100) >= profit_percent:
                            rise_percent = (price - last_buy_price) / last_buy_price * 100
                            await message.answer(
                                f"‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–æ—Å—Ç —Ü–µ–Ω—ã*\n\n"
                                f"üü¢ –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ `{rise_percent:.2f}%` –æ—Ç –ø–æ–∫—É–ø–∫–∏ –ø–æ `{last_buy_price:.6f}` {symbol[3:]}\n",
                                parse_mode="Markdown"
                            )
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –Ω–∞ —Ä–æ—Å—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            await asyncio.sleep(user_settings.pause)
                            asyncio.create_task(process_buy(telegram_id, "price_rise", message, user_settings))
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ü–µ–Ω—ã autobuy –¥–ª—è {telegram_id}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–±—ç–∫ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
            autobuy_states[telegram_id]['price_callbacks'].append(update_price_for_autobuy)
            await websocket_manager.register_price_callback(symbol, update_price_for_autobuy)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ REST API –¥–ª—è –Ω–∞—á–∞–ª–∞
            ticker_data = trade_client.ticker_price(symbol)
            handle_mexc_response(ticker_data, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")
            current_price = float(ticker_data["price"])
            autobuy_states[telegram_id]['current_price'] = current_price
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            autobuy_states[telegram_id]['is_ready'] = True
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞, –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É
            if not active_orders and current_price > 0:
                await process_buy(telegram_id, "initial_purchase", message, user)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            asyncio.create_task(periodic_resource_check(telegram_id))
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–±–∞—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏
            while True:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                subscription = await sync_to_async(
                    Subscription.objects.filter(user=user).order_by('-expires_at').first
                )()
                if not subscription or subscription.expires_at < timezone.now():
                    user.autobuy = False
                    await sync_to_async(user.save)()
                    task = user_autobuy_tasks.get(telegram_id)
                    if task:
                        task.cancel()
                        del user_autobuy_tasks[telegram_id]
                    await message.answer("‚õî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–∏–æ–¥–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                current_time = time.time()
                restart_after = autobuy_states[telegram_id].get('restart_after', 0)
                waiting_for_opportunity = autobuy_states[telegram_id].get('waiting_for_opportunity', False)
                
                if waiting_for_opportunity and restart_after > 0 and current_time >= restart_after:
                    # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É
                    autobuy_states[telegram_id]['restart_after'] = 0
                    autobuy_states[telegram_id]['waiting_for_opportunity'] = False
                    autobuy_states[telegram_id]['waiting_reported'] = False
                    logger.info(f"–ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ –∏—Å—Ç–µ–∫ –¥–ª—è {telegram_id} (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ)")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                    if not autobuy_states[telegram_id]['active_orders']:
                        await message.answer(f"üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–±–∞–π –ø–æ—Å–ª–µ –ø–∞—É–∑—ã (–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª). –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {autobuy_states[telegram_id]['current_price']}")
                        await process_buy(telegram_id, "after_waiting_period_main_loop", message, user)
                
                # –ü—Ä–æ—Å—Ç–æ –∂–¥–µ–º, —Ä–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫–æ–ª–±—ç–∫–∞—Ö
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            
            break  # –í—ã—Ö–æ–¥ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞

        except asyncio.CancelledError:
            logger.info(f"–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–±–∞—è –¥–ª—è {telegram_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            if telegram_id in autobuy_states:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º websocket_manager –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
                from bot.utils.websocket_manager import websocket_manager
                
                for callback in autobuy_states[telegram_id]['price_callbacks']:
                    try:
                        user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
                        symbol_to_unregister = user.pair.replace("/", "")
                        if symbol_to_unregister in websocket_manager.price_callbacks:
                            if callback in websocket_manager.price_callbacks[symbol_to_unregister]:
                                websocket_manager.price_callbacks[symbol_to_unregister].remove(callback)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è {telegram_id}: {e}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
            if session:
                try:
                    await session.close()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            
            raise
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ autobuy_loop –¥–ª—è {telegram_id}, –ø–∞—É–∑–∞ –∞–≤—Ç–æ–±–∞—è 30 —Å–µ–∫—É–Ω–¥: {e}")
            startup_fail_count += 1
            if startup_fail_count >= MAX_FAILS:
                error_message = parse_mexc_error(e)
                await message.answer(f"‚õî {error_message}\n\n  –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                user.autobuy = False
                await sync_to_async(user.save)()
                task = user_autobuy_tasks.get(telegram_id)
                if task:
                    task.cancel()
                    del user_autobuy_tasks[telegram_id]
                
                # –£–¥–∞–ª—è–µ–º –∫–æ–ª–±—ç–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if telegram_id in autobuy_states:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º websocket_manager –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
                    from bot.utils.websocket_manager import websocket_manager
                    
                    for callback in autobuy_states[telegram_id]['price_callbacks']:
                        try:
                            symbol_to_unregister = user.pair.replace("/", "")
                            if symbol_to_unregister in websocket_manager.price_callbacks:
                                if callback in websocket_manager.price_callbacks[symbol_to_unregister]:
                                    websocket_manager.price_callbacks[symbol_to_unregister].remove(callback)
                        except Exception as cleanup_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–ª–±—ç–∫–æ–≤: {cleanup_error}")
                    del autobuy_states[telegram_id]
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
                if session:
                    try:
                        await session.close()
                    except Exception as se:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {se}")
                
                break
            await asyncio.sleep(30)
    else:
        logger.error(f"–ê–≤—Ç–æ–±–∞–π –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è {telegram_id} –ø–æ—Å–ª–µ {MAX_FAILS} –ø–æ–ø—ã—Ç–æ–∫.")
        user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
        user.autobuy = False
        await sync_to_async(user.save)()
        task = user_autobuy_tasks.get(telegram_id)
        if task:
            task.cancel()
            del user_autobuy_tasks[telegram_id]


async def process_buy(telegram_id: int, reason: str, message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from bot.utils.websocket_manager import websocket_manager
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Lock –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    lock = asyncio.Lock()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±—ã—Å—Ç—Ä–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É (–∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
    current_time = time.time()
    last_trade_time = autobuy_states[telegram_id].get('last_trade_time', 0)
    TRADE_COOLDOWN = 15  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    if current_time - last_trade_time < TRADE_COOLDOWN:
        logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫—É–ø–∫—É - —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π ({current_time - last_trade_time}—Å < {TRADE_COOLDOWN}—Å)")
        return
    
    if not await lock.acquire():
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ - {telegram_id}")
        return
    
    try:
        # –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–±–∞–π
        user_active = await sync_to_async(User.objects.filter(telegram_id=telegram_id, autobuy=True).exists)()
        if not user_active:
            logger.info(f"–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –±–æ–ª—å—à–µ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–±–∞–π")
            return
                
        # –ü–æ–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        autobuy_states[telegram_id]['last_trade_time'] = current_time
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        autobuy_states[telegram_id]['waiting_for_opportunity'] = False
        autobuy_states[telegram_id]['restart_after'] = 0
        autobuy_states[telegram_id]['waiting_reported'] = False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        client_session = None
        try:
            trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
            symbol = user.pair.replace("/", "")
            buy_amount = float(user.buy_amount)
            profit_percent = float(user.profit)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É –¥–ª—è {telegram_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            buy_order = trade_client.new_order(symbol, "BUY", "MARKET", {"quoteOrderQty": buy_amount})
            handle_mexc_response(buy_order, "–ü–æ–∫—É–ø–∫–∞")
            order_id = buy_order["orderId"]

            # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞
            order_info = trade_client.query_order(symbol, {"orderId": order_id})
            logger.info(f"–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ {order_id}: {order_info}")

            executed_qty = float(order_info.get("executedQty", 0))
            if executed_qty == 0:
                await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (executedQty=0).")
                return

            spent = float(order_info["cummulativeQuoteQty"])
            if spent == 0:
                await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (spent=0).")
                return
            
            real_price = spent / executed_qty if executed_qty > 0 else 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ —Å—Ä–∞–∑—É
            autobuy_states[telegram_id]['last_buy_price'] = real_price
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –ø–æ–∫—É–ø–∫–∏
            logger.info(f"Buy triggered for {telegram_id} because of {reason}. New last_buy_price: {real_price}")
            
            # –†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
            sell_price = round(real_price * (1 + profit_percent / 100), 6)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            sell_order = trade_client.new_order(symbol, "SELL", "LIMIT", {
                "quantity": executed_qty,
                "price": f"{sell_price:.6f}",
                "timeInForce": "GTC"
            })
            handle_mexc_response(sell_order, "–ü—Ä–æ–¥–∞–∂–∞")
            sell_order_id = sell_order["orderId"]
            logger.info(f"SELL –æ—Ä–¥–µ—Ä {sell_order_id} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {sell_price:.6f} {symbol[3:]}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–¥–µ—Ä –≤ –±–∞–∑—É
            last_number = await sync_to_async(Deal.objects.filter(user=user).count)()
            user_order_number = last_number + 1
            
            await sync_to_async(Deal.objects.create)(
                user=user,
                order_id=sell_order_id,
                user_order_number=user_order_number,
                symbol=symbol,
                buy_price=real_price,
                quantity=executed_qty,
                sell_price=sell_price,
                status="SELL_ORDER_PLACED",
                is_autobuy=True
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            order_info = {
                "order_id": sell_order_id,
                "buy_price": real_price,
                "notified": False,
                "user_order_number": user_order_number,
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            active_orders = autobuy_states[telegram_id]['active_orders']
            active_orders.append(order_info)
            autobuy_states[telegram_id]['active_orders'] = active_orders

            await message.answer(
                f"üü¢ *–°–î–ï–õ–ö–ê {user_order_number} –û–¢–ö–†–´–¢–ê*\n\n"
                f"üìâ –ö—É–ø–ª–µ–Ω–æ –ø–æ: `{real_price:.6f}` {symbol[3:]}\n"
                f"üì¶ –ö–æ–ª-–≤–æ: `{executed_qty:.6f}` {symbol[:3]}\n"
                f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: `{spent:.2f}` {symbol[3:]}\n\n"
                f"üìà –õ–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: `{sell_price:.6f}` {symbol[3:]}\n",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {telegram_id}: {e}")
            error_message = parse_mexc_error(e)
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {error_message}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
            if client_session:
                try:
                    await client_session.close()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {telegram_id}: {e}")
        error_message = parse_mexc_error(e)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {error_message}")
    finally:
        # –í—Å–µ–≥–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        lock.release()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤ autobuy —á–µ—Ä–µ–∑ WebSocket
async def process_order_update_for_autobuy(order_id, symbol, status, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–±–∞—è —á–µ—Ä–µ–∑ WebSocket"""
    if user_id not in autobuy_states:
        return
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ —Å –ø–æ–ª–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    logger.info(f"Processing order update for user {user_id}: order_id={order_id}, status={status}, current_price={autobuy_states[user_id].get('current_price')}, last_buy_price={autobuy_states[user_id].get('last_buy_price')}")
    
    active_orders = autobuy_states[user_id]['active_orders']
    old_last_buy_price = autobuy_states[user_id].get('last_buy_price')
    
    # –ò—â–µ–º –æ—Ä–¥–µ—Ä —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    order_index = next((i for i, order in enumerate(active_orders) if order["order_id"] == order_id), None)
    
    if order_index is not None:
        if status in ["FILLED", "CANCELED"]:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ
            order_info = active_orders[order_index]
            
            # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            active_orders.pop(order_index)
            autobuy_states[user_id]['active_orders'] = active_orders
            
            # –ï—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–æ–π
            if not active_orders:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—É–∑—ã
                try:
                    user = await sync_to_async(User.objects.get)(telegram_id=user_id)
                    pause_seconds = user.pause
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
                    autobuy_states[user_id]['last_buy_price'] = None
                    autobuy_states[user_id]['waiting_for_opportunity'] = True
                    autobuy_states[user_id]['restart_after'] = time.time() + pause_seconds
                    autobuy_states[user_id]['waiting_reported'] = False
                    
                    logger.info(f"Reset last_buy_price to None as no active orders remain for user {user_id}. Next buy possible after {pause_seconds} seconds")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—É–∑—ã –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—É–∑—ã, –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º last_buy_price
                    autobuy_states[user_id]['last_buy_price'] = None
                    logger.info(f"Reset last_buy_price to None as no active orders remain for user {user_id}")
            else:
                # –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_buy_price –ø–æ —Å–∞–º–æ–º—É —Å–≤–µ–∂–µ–º—É –æ—Ä–¥–µ—Ä—É
                most_recent_order = max(active_orders, key=lambda x: x.get("user_order_number", 0))
                autobuy_states[user_id]['last_buy_price'] = most_recent_order["buy_price"]
                logger.info(f"Updated last_buy_price to {most_recent_order['buy_price']} for user {user_id} from order #{most_recent_order['user_order_number']}")

    # –õ–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if old_last_buy_price != autobuy_states[user_id].get('last_buy_price'):
        logger.info(f"last_buy_price changed for user {user_id}: {old_last_buy_price} -> {autobuy_states[user_id].get('last_buy_price')}")


async def periodic_resource_check(telegram_id: int):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    while telegram_id in autobuy_states:
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞
            gc.collect()
            
            # –ñ—É—Ä–Ω–∞–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
            client_session_count = 0
            for obj in gc.get_objects():
                if 'ClientSession' in str(type(obj)):
                    client_session_count += 1
            
            if client_session_count > 5:  # –ü–æ—Ä–æ–≥ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {client_session_count} –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            current_time = time.time()
            restart_after = autobuy_states[telegram_id].get('restart_after', 0)
            waiting_for_opportunity = autobuy_states[telegram_id].get('waiting_for_opportunity', False)
            
            if waiting_for_opportunity and restart_after > 0 and current_time >= restart_after:
                logger.info(f"–ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫ –¥–ª—è {telegram_id} (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤)")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ periodic_resource_check –¥–ª—è {telegram_id}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(30)
