from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
import asyncio
from bot.commands.buy import monitor_order
from bot.middlewares.require_pair_middleware import RequirePairMiddleware
from bot.utils.mexc import get_user_client
from users.models import User, Deal
from logger import logger
from bot.keyboards.inline import get_period_keyboard
from asgiref.sync import sync_to_async
from mexc_sdk import Trade  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏


router = Router()
router.message.middleware(RequirePairMiddleware())

# /price
@router.message(Command("price"))
async def get_user_price(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client, pair = get_user_client(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è –ø–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞
        if not pair:
            raise ValueError("–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ ticker_price (–ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å)
        ticker = client.ticker_price(pair)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–¶–µ–Ω–∞ {pair}: {ticker['price']}")
    
    except ValueError as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ API –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—â—É—é –æ—à–∏–±–∫—É
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")


import locale
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')  # –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ Windows, —Ç–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

@router.message(Command("balance"))
async def balance_handler(message: Message):
    try:
        user = User.objects.get(telegram_id=message.from_user.id)
        client, pair = get_user_client(message.from_user.id)

        account_info = client.account_info()
        logger.info(f"Account Info for {message.from_user.id}: {account_info}")

        balances_message = "üí∞ <b>–ë–ê–õ–ê–ù–°</b>\n"

        for balance in account_info['balances']:
            asset = balance['asset']
            free = float(balance['free'])
            locked = float(balance['locked'])

            if free > 0 or locked > 0:
                balances_message += (
                    f"\n<b>{asset}</b>\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {format(free, ',.2f').replace(',', 'X').replace('.', ',').replace('X', '.').replace(' ', '¬†')}\n"
                    f"–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: {format(locked, ',.2f').replace(',', 'X').replace('.', ',').replace('X', '.').replace(' ', '¬†')}"
                )

        orders = client.open_orders(symbol=pair)
        logger.info(f"Open Orders for {message.from_user.id}: {orders}")

        total_order_amount = sum([float(order['origQty']) for order in orders])
        total_order_value = sum([float(order['price']) * float(order['origQty']) for order in orders])
        avg_price = total_order_value / total_order_amount if total_order_amount > 0 else 0

        orders_message = (
            f"\n\nüìÑ <b>–û—Ä–¥–µ—Ä–∞</b>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {format(total_order_amount, ',.0f').replace(',', '¬†')}\n"
            f"–°—É–º–º–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {format(total_order_value, ',.2f').replace(',', 'X').replace('.', ',').replace('X', '.').replace(' ', '¬†')} USDT\n"
            f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {format(avg_price, ',.6f').replace(',', 'X').replace('.', ',').replace('X', '.')} USDT"
        )

        await message.answer(balances_message + orders_message, parse_mode="HTML")
        logger.info(f"User {user.telegram_id} requested balance and orders.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")


# /buy
@router.message(Command("buy"))
async def buy_handler(message: Message):
    try:
        user = User.objects.get(telegram_id=message.from_user.id)

        if not user.pair:
            await message.answer("‚ùó –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É. –í–≤–µ–¥–∏—Ç–µ /pair –¥–ª—è –≤—ã–±–æ—Ä–∞.")
            return

        symbol = user.pair.replace("/", "")
        trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
        buy_amount = float(user.buy_amount)

        # 1. –ü–û–ö–£–ü–ö–ê –ø–æ —Ä—ã–Ω–∫—É –Ω–∞ —Å—É–º–º—É
        buy_order = trade_client.new_order_test(symbol, "BUY", "MARKET", {
            "quoteOrderQty": buy_amount
        })

        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ä–¥–µ—Ä–∞
        executed_qty = float(buy_order["executedQty"])  # —Å–∫–æ–ª—å–∫–æ –∫—É–ø–∏–ª–∏
        avg_price = float(buy_order["fills"][0]["price"])  # –ø–æ –∫–∞–∫–æ–π —Ü–µ–Ω–µ
        # executed_qty = 100  # –∑–∞–≥–ª—É—à–∫–∞
        # avg_price = 120  # –∑–∞–≥–ª—É—à–∫–∞


        spent = executed_qty * avg_price  # —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ

        # 3. –°—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
        profit_percent = float(user.profit)
        sell_price = round(avg_price * (1 + profit_percent / 100), 6)

        # 4. –í–´–°–¢–ê–í–õ–Ø–ï–ú –ª–∏–º–∏—Ç–Ω—ã–π SELL –æ—Ä–¥–µ—Ä
        sell_order = trade_client.new_order_test(symbol, "SELL", "LIMIT", {
            "quantity": executed_qty,
            "price": f"{sell_price:.6f}",
            "timeInForce": "GTC"
        })
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–¥–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –ø–æ–∫—É–ø–∫—É
        order_id = sell_order['orderId']
        deal = await sync_to_async(Deal.objects.create)(
            user=user,
            order_id=order_id,
            symbol=symbol,
            buy_price=avg_price,  # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            quantity=executed_qty,
            status="BUY_ORDER_PLACED"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        deal.sell_price = sell_price
        deal.status = "SELL_ORDER_PLACED"
        deal.save()

        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
        text = (
            f"‚úÖ –ö–£–ü–õ–ï–ù–û\n\n"
            f"{executed_qty:.2f} {symbol[:-4]} –ø–æ {avg_price:.6f} USDT\n\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ\n"
            f"{spent:.8f} USDT\n\n"
            f"üìà –í–´–°–¢–ê–í–õ–ï–ù–û\n\n"
            f"{executed_qty:.2f} {symbol[:-4]} –ø–æ {sell_price:.6f} USDT"
        )
        await message.answer(text)

        logger.info(f"BUY + SELL for {user.telegram_id}: {executed_qty} {symbol} @ {avg_price} -> {sell_price}")
        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–∞
        asyncio.create_task(monitor_order(message, order_id))
        logger.info(f"Monitoring order {buy_order['orderId']} for user {user.telegram_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ /buy –¥–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.")



# /auto_buy
@router.message(Command("autobuy"))
async def auto_buy_handler(message: Message):
    try:
        user = User.objects.get(telegram_id=message.from_user.id)
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É
        await message.answer(f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –ø–æ –ø–∞—Ä–µ {user.pair} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)")
        logger.info(f"User {user.telegram_id} activated auto-buy for {user.pair}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏.")

# /status
@router.message(Command("status"))
async def status_handler(message: Message):
    try:
        user = User.objects.get(telegram_id=message.from_user.id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        await message.answer(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ {user.pair}: –∞–∫—Ç–∏–≤–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)")
        logger.info(f"User {user.telegram_id} requested status for {user.pair}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")


# /stats
@router.message(Command("stats"))
async def ask_stats_period(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=get_period_keyboard())

