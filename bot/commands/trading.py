from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
import asyncio
# from bot.commands.buy import monitor_order
from bot.commands.autobuy import autobuy_loop
from bot.utils.mexc import get_user_client
from bot.utils.websocket_manager import websocket_manager
from bot.utils.user_autobuy_tasks import user_autobuy_tasks
from users.models import User, Deal
from logger import logger
from bot.keyboards.inline import get_period_keyboard, get_pagination_keyboard
from asgiref.sync import sync_to_async
from mexc_sdk import Trade  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
from django.utils.timezone import localtime
from bot.utils.mexc import handle_mexc_response, get_actual_order_status
from bot.utils.api_errors import parse_mexc_error
from bot.utils.bot_logging import log_command
import math

router = Router()

# /price
@router.message(Command("price"))
async def get_user_price(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or str(user_id)
    command = "/price"
    response_text = ""
    success = True

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client, pair = get_user_client(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è –ø–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞
        if not pair:
            raise ValueError("–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å –ø–æ–º–æ—â—å—é REST API
        ticker = await asyncio.to_thread(client.ticker_price, pair)
        current_price = ticker['price']

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_text = f"–¶–µ–Ω–∞ {pair}: {current_price}"
        sent_message = await message.answer(response_text)

        # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not websocket_manager.market_connection:
            await websocket_manager.connect_market_data([pair])
        elif pair not in websocket_manager.market_subscriptions:
            await websocket_manager.subscribe_market_data([pair])

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        async def update_price_message(symbol, price):
            nonlocal sent_message
            await sent_message.edit_text(f"–¶–µ–Ω–∞ {symbol}: {price} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        await websocket_manager.register_price_callback(pair, update_price_message)

        # –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ —É–¥–∞–ª–∏–º callback (—á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –∏—Ö)
        await asyncio.sleep(10)

        if pair in websocket_manager.price_callbacks:
            if update_price_message in websocket_manager.price_callbacks[pair]:
                websocket_manager.price_callbacks[pair].remove(update_price_message)

    except ValueError as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ API –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
        response_text = f"–û—à–∏–±–∫–∞: {e}"
        success = False
        await message.answer(response_text)
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—â—É—é –æ—à–∏–±–∫—É
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        response_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã."
        success = False
        await message.answer(response_text)

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–≤–µ—Ç
    await log_command(
        user_id=user_id,
        command=command,
        response=response_text,
        success=success,
        extra_data={
            "username": username,
            "chat_id": message.chat.id,
            "pair": pair if 'pair' in locals() else None
        }
    )


@router.message(Command("balance"))
async def balance_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or str(user_id)
    command = "/balance"
    response_text = ""
    success = True
    extra_data = {"username": username, "chat_id": message.chat.id}

    try:
        user = User.objects.get(telegram_id=message.from_user.id)
        client, pair = get_user_client(message.from_user.id)
        extra_data["pair"] = pair

        account_info = await asyncio.to_thread(client.account_info)
        logger.info(f"Account Info for {message.from_user.id}: {account_info}")

        # –û–ø—Ä–µ–¥–µ–ª–∏–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –Ω–∞—Å —Ç–æ–∫–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä—ã
        base_asset = pair[:-4]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, KAS –∏–ª–∏ BTC
        quote_asset = pair[-4:]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, USDT –∏–ª–∏ USDC
        relevant_assets = {base_asset, quote_asset}

        balances_message = "üí∞ <b>–ë–ê–õ–ê–ù–°</b>\n"

        for balance in account_info['balances']:
            asset = balance['asset']
            if asset not in relevant_assets:
                continue

            free = float(balance['free'])
            locked = float(balance['locked'])

            balances_message += (
                f"\n<b>{asset}</b>\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {format(free, ',.6f').replace(',', 'X').replace('.', ',').replace('X', '.').replace(' ', ' ')}\n"
                f"–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: {format(locked, ',.6f').replace(',', 'X').replace('.', ',').replace('X', '.').replace(' ', ' ')}"
            )

        orders = await asyncio.to_thread(client.open_orders, symbol=pair)
        logger.info(f"Open Orders for {message.from_user.id}: {orders}")
        open_orders_count = len(orders)
        extra_data["open_orders_count"] = open_orders_count

        total_order_amount = sum([float(order['origQty']) for order in orders])
        total_order_value = sum([float(order['price']) * float(order['origQty']) for order in orders])
        avg_price = total_order_value / total_order_amount if total_order_amount > 0 else 0

        orders_message = (
            f"\n\nüìÑ <b>–û—Ä–¥–µ—Ä–∞</b>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {open_orders_count}\n"
            f"–°—É–º–º–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {format(total_order_value, ',.4f').replace(',', 'X').replace('.', ',').replace('X', '.')} {quote_asset}\n"
            f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {format(avg_price, ',.6f').replace(',', 'X').replace('.', ',').replace('X', '.')} {quote_asset}"
        )

        response_text = balances_message + orders_message
        await message.answer(response_text, parse_mode="HTML")
        logger.info(f"User {user.telegram_id} requested balance and orders.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        response_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞."
        success = False
        await message.answer(response_text)

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–≤–µ—Ç
    await log_command(
        user_id=user_id,
        command=command,
        response=response_text,
        success=success,
        extra_data=extra_data
    )


# /buy
@router.message(Command("buy"))
async def buy_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or str(user_id)
    command = "/buy"
    response_text = ""
    success = True
    extra_data = {"username": username, "chat_id": message.chat.id}

    try:
        user = User.objects.get(telegram_id=message.from_user.id)

        if not user.pair:
            response_text = "‚ùó –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É. –í–≤–µ–¥–∏—Ç–µ /pair –¥–ª—è –≤—ã–±–æ—Ä–∞."
            success = False
            await message.answer(response_text)
            return

        symbol = user.pair.replace("/", "")
        extra_data["symbol"] = symbol
        trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
        buy_amount = float(user.buy_amount)
        extra_data["buy_amount"] = buy_amount

        # 1. –°–æ–∑–¥–∞—ë–º –æ—Ä–¥–µ—Ä
        buy_order = await asyncio.to_thread(
            trade_client.new_order,
            symbol,
            "BUY",
            "MARKET",
            {"quoteOrderQty": buy_amount},
        )
        handle_mexc_response(buy_order, "–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ /buy")

        order_id = buy_order["orderId"]
        extra_data["buy_order_id"] = order_id

        # 2. –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ query_order
        order_info = await asyncio.to_thread(trade_client.query_order, symbol, {"orderId": order_id})
        logger.info(f"–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ {order_id}: {order_info}")

        # 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
        executed_qty = float(order_info.get("executedQty", 0))
        if executed_qty == 0:
            response_text = "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (executedQty=0)."
            success = False
            await message.answer(response_text)
            return

        spent = float(order_info["cummulativeQuoteQty"])
        if spent == 0:
            response_text = "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (spent=0)."
            success = False
            await message.answer(response_text)
            return

        real_price = spent / executed_qty if executed_qty > 0 else 0
        extra_data["real_price"] = real_price
        extra_data["executed_qty"] = executed_qty
        extra_data["spent"] = spent

        # 4. –°—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
        profit_percent = float(user.profit)
        sell_price = round(real_price * (1 + profit_percent / 100), 6)
        extra_data["sell_price"] = sell_price
        extra_data["profit_percent"] = profit_percent

        # 5. –í—ã—Å—Ç–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π SELL –æ—Ä–¥–µ—Ä
        sell_order = await asyncio.to_thread(
            trade_client.new_order,
            symbol,
            "SELL",
            "LIMIT",
            {
                "quantity": executed_qty,
                "price": f"{sell_price:.6f}",
                "timeInForce": "GTC",
            },
        )
        handle_mexc_response(sell_order, "–ü—Ä–æ–¥–∞–∂–∞")
        sell_order_id = sell_order["orderId"]
        extra_data["sell_order_id"] = sell_order_id
        logger.info(f"SELL –æ—Ä–¥–µ—Ä {sell_order_id} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {sell_price:.6f} {symbol[3:]}")

        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–¥–µ—Ä –≤ –±–∞–∑—É
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä
        last_number = await sync_to_async(
            lambda: Deal.objects.filter(user=user).count()
        )()
        user_order_number = last_number + 1
        extra_data["user_order_number"] = user_order_number
        deal = await sync_to_async(Deal.objects.create)(
            user=user,
            order_id=sell_order_id,
            user_order_number=user_order_number,
            symbol=symbol,
            buy_price=real_price,
            quantity=executed_qty,
            sell_price=sell_price,
            status="NEW"
        )

        # 6.1 –£—Ç–æ—á–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ REST —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è SELL
        try:
            order_check = await asyncio.to_thread(trade_client.query_order, symbol, {"orderId": sell_order_id})
            current_status = order_check.get("status")
            if current_status and current_status != deal.status:
                deal.status = current_status
                await sync_to_async(deal.save)()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ {sell_order_id}: {e}")

        # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        response_text = (
            f"üü¢ *–°–î–ï–õ–ö–ê {user_order_number} –û–¢–ö–†–´–¢–ê*\n\n"
            f"üìâ –ö—É–ø–ª–µ–Ω–æ –ø–æ: `{real_price:.6f}` {symbol[3:]}\n"
            f"üì¶ –ö–æ–ª-–≤–æ: `{executed_qty:.6f}` {symbol[:3]}\n"
            f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: `{spent:.2f}` {symbol[3:]}\n\n"
            f"üìà –õ–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: `{sell_price:.6f}` {symbol[3:]}"
        )
        await message.answer(response_text, parse_mode="Markdown")

        logger.info(f"BUY + SELL for {user.telegram_id}: {executed_qty} {symbol} @ {real_price} -> {sell_price}")

        # 8. –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - WebSocket –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        # –°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ WebSocket

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /buy")
        response_text = f"‚ùå {parse_mexc_error(e)}"
        success = False
        await message.answer(response_text)

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–≤–µ—Ç
    await log_command(
        user_id=user_id,
        command=command,
        response=response_text,
        success=success,
        extra_data=extra_data
    )


# /auto_buy
@router.message(Command("autobuy"))
async def autobuy_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or str(user_id)
    command = "/autobuy"
    response_text = ""
    success = True
    extra_data = {"username": username, "chat_id": message.chat.id}

    try:
        telegram_id = message.from_user.id
        user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
        extra_data["pair"] = user.pair

        if user.autobuy:
            response_text = "‚ö†Ô∏è –ê–≤—Ç–æ–±–∞–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: /stop"
            await message.answer(response_text)
            return

        user.autobuy = True
        await sync_to_async(user.save)()


        # –í –∫–æ–Ω—Ü–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
        response_text = "üü¢ –ê–≤—Ç–æ–±–∞–π –∑–∞–ø—É—â–µ–Ω"
        await message.answer(response_text)

        # –î–∞–ª–µ–µ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
        task = asyncio.create_task(autobuy_loop(message, telegram_id))
        user_autobuy_tasks[telegram_id] = task

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–±–∞—è –¥–ª—è {user_id}")
        response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–±–∞—è: {str(e)}"
        success = False
        await message.answer(response_text)

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–≤–µ—Ç
    await log_command(
        user_id=user_id,
        command=command,
        response=response_text,
        success=success,
        extra_data=extra_data
    )

# /stop
@router.message(Command("stop"))
async def stop_autobuy(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or str(user_id)
    command = "/stop"
    response_text = ""
    success = True
    extra_data = {"username": username, "chat_id": message.chat.id}

    try:
        telegram_id = message.from_user.id

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–º–µ–Ω—è–µ–º –µ—ë
        if telegram_id in user_autobuy_tasks and not user_autobuy_tasks[telegram_id].done():
            user_autobuy_tasks[telegram_id].cancel()
            logger.info(f"Autobuy task for user {telegram_id} cancelled")

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)
        user.autobuy = False
        await sync_to_async(user.save)()

        response_text = "üî¥ –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        await message.answer(response_text)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤—Ç–æ–±–∞—è –¥–ª—è {user_id}")
        response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤—Ç–æ–±–∞—è: {str(e)}"
        success = False
        await message.answer(response_text)

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–≤–µ—Ç
    await log_command(
        user_id=user_id,
        command=command,
        response=response_text,
        success=success,
        extra_data=extra_data
    )

# /status
@router.message(Command("status"))
async def status_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or str(user_id)
    command = "/status"
    response_text = ""
    success = True
    extra_data = {"username": username, "chat_id": message.chat.id}

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã
        await show_status_page(message, user_id, page=1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        response_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞."
        success = False
        await message.answer(response_text)
        extra_data["error"] = str(e)

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–≤–µ—Ç
    await log_command(
        user_id=user_id,
        command=command,
        response="–ó–∞–ø—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–æ–≤",
        success=success,
        extra_data=extra_data
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ status
@router.callback_query(F.data.startswith("status_page:"))
async def status_pagination_handler(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = callback.data.split(":")
    if len(parts) != 3 or parts[0] != "status_page":
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        user_id = int(parts[1])
        page = int(parts[2])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª —Å–≤–æ—é –∫–Ω–æ–ø–∫—É
        if user_id != callback.from_user.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞")
            return

        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user = await sync_to_async(User.objects.get)(telegram_id=user_id)

        header = "üîÅ <b>–ê–≤—Ç–æ–±–∞–π –∑–∞–ø—É—â–µ–Ω.</b>" if user.autobuy else "‚ö†Ô∏è <b>–ê–≤—Ç–æ–±–∞–π –Ω–µ –∑–∞–ø—É—â–µ–Ω.</b>"

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –±–∞–∑—ã (–±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤)
        active_deals = await sync_to_async(list)(Deal.objects.filter(
            user=user,
            status__in=["PARTIALLY_FILLED", "NEW"]
        ).order_by("-created_at"))

        # –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        orders_per_page = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        total_orders = len(active_deals)
        total_pages = math.ceil(total_orders / orders_per_page) if total_orders > 0 else 1

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 1:
            page = 1
        elif page > total_pages:
            page = total_pages

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        start_idx = (page - 1) * orders_per_page
        end_idx = start_idx + orders_per_page
        current_page_deals = active_deals[start_idx:end_idx]

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_chunk = header

        if current_page_deals:
            for deal in reversed(current_page_deals):  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                try:
                    date_str = localtime(deal.created_at).strftime("%d %B %Y %H:%M:%S")
                    autobuy_note = " (AutoBuy)" if deal.is_autobuy else ""
                    symbol = deal.symbol

                    formatted = (
                        f"\n\n<u>{deal.user_order_number}. –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É{autobuy_note}</u>\n\n"
                        f"<b>{deal.quantity:.6f} {symbol[:3]}</b>\n"
                        f"- –ö—É–ø–ª–µ–Ω–æ –ø–æ <b>{deal.buy_price:.6f}</b> (<b>{deal.buy_price * deal.quantity:.2f}</b> {symbol[3:]})\n"
                        f"- –ü—Ä–æ–¥–∞–µ—Ç—Å—è –ø–æ <b>{deal.sell_price:.6f}</b> (<b>{deal.sell_price * deal.quantity:.2f}</b> {symbol[3:]})\n\n"
                        f"<i>{date_str}</i>"
                    )

                    current_chunk += formatted
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–µ–ª–∫–∏ {deal.user_order_number}: {e}")
                    continue
        else:
            current_chunk += "\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤."

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        current_chunk += f"\n\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {localtime().strftime('%H:%M:%S')}</i>"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ –±–æ–ª—å—à–µ —á–µ–º orders_per_page –æ—Ä–¥–µ—Ä–æ–≤
        keyboard = None
        if total_orders > orders_per_page:
            keyboard = get_pagination_keyboard(page, total_pages, user_id)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        try:
            await callback.message.edit_text(
                text=current_chunk,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ callback: {e}", exc_info=True)
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                text=current_chunk,
                parse_mode="HTML",
                reply_markup=keyboard
            )

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–æ–≤
async def show_status_page(message, user_id, page=1, check_status=True):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await sync_to_async(User.objects.get)(telegram_id=user_id)

        header = "üîÅ <b>–ê–≤—Ç–æ–±–∞–π –∑–∞–ø—É—â–µ–Ω.</b>" if user.autobuy else "‚ö†Ô∏è <b>–ê–≤—Ç–æ–±–∞–π –Ω–µ –∑–∞–ø—É—â–µ–Ω.</b>"

        # –û—Ä–¥–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        active_deals = []

        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        if check_status:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                client = None
                symbol = None
                try:
                    client, pair = get_user_client(user_id)
                    symbol = pair  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

                # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if client and symbol:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                    user_deals = await sync_to_async(list)(Deal.objects.filter(user=user))

                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ ID
                    deals_by_id = {deal.order_id: deal for deal in user_deals}

                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –ø–∞—Ä—ã –∏–∑ API
                    try:
                        open_orders = client.open_orders(symbol=symbol)
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(open_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ API –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                        api_order_ids = {str(order['orderId']) for order in open_orders}

                        # –ò—â–µ–º –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ NEW –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ API
                        for deal_id, deal in deals_by_id.items():
                            if deal.status in ["NEW", "PARTIALLY_FILLED"] and deal_id not in api_order_ids:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                                api_status = await sync_to_async(get_actual_order_status)(
                                    user, deal.symbol, deal.order_id
                                )

                                # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ SKIPPED
                                if api_status == "ERROR" or api_status not in ["NEW", "PARTIALLY_FILLED"]:
                                    deal.status = "SKIPPED"
                                    await sync_to_async(deal.save)()
                                    logger.info(f"–û—Ä–¥–µ—Ä {deal_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ SKIPPED (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API)")
                                else:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ API
                                    deal.status = api_status
                                    await sync_to_async(deal.save)()

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –±–∞–∑–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                        for order in open_orders:
                            order_id = str(order['orderId'])
                            current_status = order['status']

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ä–¥–µ—Ä –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
                            if order_id in deals_by_id:
                                deal = deals_by_id[order_id]
                                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                                if deal.status != current_status:
                                    deal.status = current_status
                                    await sync_to_async(deal.save)()

                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
                                if current_status in ["PARTIALLY_FILLED", "NEW"]:
                                    active_deals.append(deal)
                            else:
                                # –≠—Ç–æ—Ç –æ—Ä–¥–µ—Ä –Ω–µ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
                                logger.info(f"–ù–∞–π–¥–µ–Ω –æ—Ä–¥–µ—Ä {order_id}, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")

                # –ü–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —á–µ—Ä–µ–∑ API –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –±–∞–∑—ã
                active_deals = await sync_to_async(list)(Deal.objects.filter(
                    user=user,
                    status__in=["PARTIALLY_FILLED", "NEW"]
                ).order_by("-created_at"))

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
                active_deals = await sync_to_async(list)(Deal.objects.filter(
                    user=user,
                    status__in=["PARTIALLY_FILLED", "NEW"]
                ).order_by("-created_at"))
        else:
            # –ï—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –±–∞–∑—ã
            active_deals = await sync_to_async(list)(Deal.objects.filter(
                user=user,
                status__in=["PARTIALLY_FILLED", "NEW"]
            ).order_by("-created_at"))

        # –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        orders_per_page = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        total_orders = len(active_deals)
        total_pages = math.ceil(total_orders / orders_per_page) if total_orders > 0 else 1

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 1:
            page = 1
        elif page > total_pages:
            page = total_pages

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        start_idx = (page - 1) * orders_per_page
        end_idx = start_idx + orders_per_page
        current_page_deals = active_deals[start_idx:end_idx]

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_chunk = header

        if current_page_deals:
            for deal in reversed(current_page_deals):  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                try:
                    date_str = localtime(deal.created_at).strftime("%d %B %Y %H:%M:%S")
                    autobuy_note = " (AutoBuy)" if deal.is_autobuy else ""
                    symbol = deal.symbol

                    formatted = (
                        f"\n\n<u>{deal.user_order_number}. –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É{autobuy_note}</u>\n\n"
                        f"<b>{deal.quantity:.6f} {symbol[:3]}</b>\n"
                        f"- –ö—É–ø–ª–µ–Ω–æ –ø–æ <b>{deal.buy_price:.6f}</b> (<b>{deal.buy_price * deal.quantity:.2f}</b> {symbol[3:]})\n"
                        f"- –ü—Ä–æ–¥–∞–µ—Ç—Å—è –ø–æ <b>{deal.sell_price:.6f}</b> (<b>{deal.sell_price * deal.quantity:.2f}</b> {symbol[3:]})\n\n"
                        f"<i>{date_str}</i>"
                    )

                    current_chunk += formatted
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–µ–ª–∫–∏ {deal.user_order_number}: {e}")
                    continue
        else:
            current_chunk += "\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤."

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        current_chunk += f"\n\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {localtime().strftime('%H:%M:%S')}</i>"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ –±–æ–ª—å—à–µ —á–µ–º orders_per_page –æ—Ä–¥–µ—Ä–æ–≤
        keyboard = None
        if total_orders > orders_per_page:
            keyboard = get_pagination_keyboard(page, total_pages, user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        if isinstance(message, Message):
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /status, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await message.answer(current_chunk, parse_mode="HTML",
                                              reply_markup=keyboard)
            return sent_message
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
            try:
                logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
                await message.edit_text(current_chunk, parse_mode="HTML",
                                       reply_markup=keyboard)
                return message
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}, —Ç–∏–ø: {type(e)}", exc_info=True)
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.answer –≤–º–µ—Å—Ç–æ message.chat.send_message
                try:
                    sent_message = await message.answer(current_chunk, parse_mode="HTML",
                                              reply_markup=keyboard)
                    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    return sent_message
                except Exception as new_e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {new_e}")
                    return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–∞: {e}", exc_info=True)
        error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞."

        if isinstance(message, Message):
            await message.answer(error_message)
        else:
            try:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.answer(error_message)
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å message.answer, –∏—Å–ø–æ–ª—å–∑—É–µ–º chat.send_message
                await message.chat.send_message(error_message)


# /stats
@router.message(Command("stats"))
async def ask_stats_period(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or str(user_id)
    command = "/stats"
    response_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
    success = True
    extra_data = {"username": username, "chat_id": message.chat.id}

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞
        keyboard = get_period_keyboard()
        await message.answer(response_text, reply_markup=keyboard)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_id}")
        response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        success = False
        await message.answer(response_text)

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–≤–µ—Ç
    await log_command(
        user_id=user_id,
        command=command,
        response=response_text,
        success=success,
        extra_data=extra_data
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "dummy_callback")
async def dummy_callback_handler(callback: CallbackQuery):
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
