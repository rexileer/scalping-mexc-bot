from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
import asyncio
from bot.commands.buy import monitor_order
from bot.commands.autobuy import autobuy_loop
from bot.utils.mexc import get_user_client
from bot.utils.user_autobuy_tasks import user_autobuy_tasks
from users.models import User, Deal
from logger import logger
from bot.keyboards.inline import get_period_keyboard
from asgiref.sync import sync_to_async
from mexc_sdk import Trade  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
from django.utils.timezone import localtime
from bot.utils.mexc import handle_mexc_response
from bot.utils.api_errors import parse_mexc_error


router = Router()

# /price
@router.message(Command("price"))
async def get_user_price(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client, pair = get_user_client(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è –ø–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞
        if not pair:
            raise ValueError("–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ ticker_price (–ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å)
        ticker = client.ticker_price(pair)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–¶–µ–Ω–∞ {pair}: {ticker['price']}")
    
    except ValueError as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ API –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—â—É—é –æ—à–∏–±–∫—É
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")


@router.message(Command("balance"))
async def balance_handler(message: Message):
    try:
        user = User.objects.get(telegram_id=message.from_user.id)
        client, pair = get_user_client(message.from_user.id)

        account_info = client.account_info()
        logger.info(f"Account Info for {message.from_user.id}: {account_info}")

        balances_message = "üí∞ <b>–ë–ê–õ–ê–ù–°</b>\n"

        for balance in account_info['balances']:
            asset = balance['asset']
            free = float(balance['free'])
            locked = float(balance['locked'])

            if free > 0 or locked > 0:
                balances_message += (
                    f"\n<b>{asset}</b>\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {format(free, ',.2f').replace(',', 'X').replace('.', ',').replace('X', '.').replace(' ', '¬†')}\n"
                    f"–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: {format(locked, ',.2f').replace(',', 'X').replace('.', ',').replace('X', '.').replace(' ', '¬†')}"
                )

        orders = client.open_orders(symbol=pair)
        logger.info(f"Open Orders for {message.from_user.id}: {orders}")

        total_order_amount = sum([float(order['origQty']) for order in orders])
        total_order_value = sum([float(order['price']) * float(order['origQty']) for order in orders])
        avg_price = total_order_value / total_order_amount if total_order_amount > 0 else 0

        orders_message = (
            f"\n\nüìÑ <b>–û—Ä–¥–µ—Ä–∞</b>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {format(total_order_amount, ',.0f').replace(',', '¬†')}\n"
            f"–°—É–º–º–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {format(total_order_value, ',.2f').replace(',', 'X').replace('.', ',').replace('X', '.').replace(' ', '¬†')} USDT/USDC\n"
            f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {format(avg_price, ',.6f').replace(',', 'X').replace('.', ',').replace('X', '.')} USDT/USDC"
        )

        await message.answer(balances_message + orders_message, parse_mode="HTML")
        logger.info(f"User {user.telegram_id} requested balance and orders.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")

# /buy
@router.message(Command("buy"))
async def buy_handler(message: Message):
    try:
        user = User.objects.get(telegram_id=message.from_user.id)

        if not user.pair:
            await message.answer("‚ùó –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É. –í–≤–µ–¥–∏—Ç–µ /pair –¥–ª—è –≤—ã–±–æ—Ä–∞.")
            return

        symbol = user.pair.replace("/", "")
        trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
        buy_amount = float(user.buy_amount)

        # 1. –°–æ–∑–¥–∞—ë–º –æ—Ä–¥–µ—Ä
        buy_order = trade_client.new_order(symbol, "BUY", "MARKET", {
            "quoteOrderQty": buy_amount
        })
        handle_mexc_response(buy_order, "–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ /buy")

        order_id = buy_order["orderId"]

        # 2. –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ query_order
        order_info = trade_client.query_order(symbol, {"orderId": order_id})
        logger.info(f"–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ {order_id}: {order_info}")

        # 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
        executed_qty = float(order_info.get("executedQty", 0))
        if executed_qty == 0:
            await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (executedQty=0).")
            return

        spent = float(order_info["cummulativeQuoteQty"])  # 0.999371
        if spent == 0:
            await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ (spent=0).")
            return
        
        real_price = spent / executed_qty if executed_qty > 0 else 0
        
        # 4. –°—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
        profit_percent = float(user.profit)
        sell_price = round(real_price * (1 + profit_percent / 100), 6)

        # 5. –í—ã—Å—Ç–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π SELL –æ—Ä–¥–µ—Ä
        sell_order = trade_client.new_order(symbol, "SELL", "LIMIT", {
            "quantity": executed_qty,
            "price": f"{sell_price:.6f}",
            "timeInForce": "GTC"
        })
        handle_mexc_response(sell_order, "–ü—Ä–æ–¥–∞–∂–∞")
        sell_order_id = sell_order["orderId"]
        logger.info(f"SELL –æ—Ä–¥–µ—Ä {sell_order_id} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {sell_price:.6f} {symbol[3:]}")

        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–¥–µ—Ä –≤ –±–∞–∑—É
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä
        last_number = await sync_to_async(
            lambda: Deal.objects.filter(user=user).count()
        )()
        user_order_number = last_number + 1
        deal = await sync_to_async(Deal.objects.create)(
            user=user,
            order_id=sell_order_id,
            user_order_number=user_order_number,
            symbol=symbol,
            buy_price=real_price,
            quantity=executed_qty,
            sell_price=sell_price,
            status="SELL_ORDER_PLACED"
        )

        # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        text = (
            f"‚úÖ <b>–ö–£–ü–õ–ï–ù–û</b>\n\n"
            f"{executed_qty:.2f} {symbol[:3]} –ø–æ {real_price:.6f} {symbol[3:]}\n\n"
            f"<b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</b>\n"
            f"{spent:.8f} {symbol[3:]}\n\n"
            f"üìà <b>–í–´–°–¢–ê–í–õ–ï–ù–û</b>\n\n"
            f"{executed_qty:.2f} {symbol[:3]} –ø–æ {sell_price:.6f} {symbol[3:]}"
        )
        await message.answer(text, parse_mode='HTML')

        logger.info(f"BUY + SELL for {user.telegram_id}: {executed_qty} {symbol} @ {real_price} -> {sell_price}")

        # 8. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–∞
        asyncio.create_task(monitor_order(message, sell_order_id, user_order_number))

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /buy")
        user_message = f"‚ùå {parse_mexc_error(e)}"
        await message.answer(user_message)


# /auto_buy
@router.message(Command("autobuy"))
async def autobuy_handler(message: Message):
    telegram_id = message.from_user.id
    user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)

    if user.autobuy:
        await message.answer("‚ö†Ô∏è –ê–≤—Ç–æ–±–∞–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: /stop")
        return

    user.autobuy = True
    await sync_to_async(user.save)()

    task = asyncio.create_task(autobuy_loop(message, telegram_id))
    user_autobuy_tasks[telegram_id] = task

    await message.answer("üîÅ –ê–≤—Ç–æ–±–∞–π –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: /stop")


@router.message(Command("stop"))
async def stop_autobuy(message: Message):
    telegram_id = message.from_user.id
    user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)

    task = user_autobuy_tasks.get(telegram_id)

    if user.autobuy:
        user.autobuy = False
        await sync_to_async(user.save)()

        if task:
            task.cancel()
            del user_autobuy_tasks[telegram_id]

        await message.answer("‚õî –ê–≤—Ç–æ–±–∞–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.answer("‚ö†Ô∏è –ê–≤—Ç–æ–±–∞–π –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")


# /status
@router.message(Command("status"))
async def status_handler(message: Message):
    telegram_id = message.from_user.id
    try:
        user = await sync_to_async(User.objects.get)(telegram_id=telegram_id)

        if not user.autobuy:
            await message.answer("‚è∏ AutoBuy –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
            return

        last_deal = await sync_to_async(
            lambda: Deal.objects.filter(user=user, is_autobuy=True).order_by("-created_at").first()
        )()

        if not last_deal:
            await message.answer("üîÅ AutoBuy –∑–∞–ø—É—â–µ–Ω.\n–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞...")
            return

        updated = localtime(last_deal.updated_at).strftime('%d.%m %H:%M')

        status_text = {
            "SELL_ORDER_PLACED": "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏",
            "FILLED": "‚úÖ –°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞",
            "CANCELLED": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
        }.get(last_deal.status, f"üìå –°—Ç–∞—Ç—É—Å: {last_deal.status}")

        text = (
            f"üîÅ *AutoBuy –∞–∫—Ç–∏–≤–µ–Ω*\n"
            f"–ü–∞—Ä–∞: *{last_deal.symbol}*\n\n"
            f"{status_text}\n"
            f"{last_deal.quantity:.4f} {last_deal.symbol[:3]} –ø–æ {last_deal.sell_price:.4f} {last_deal.symbol[3:]}\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}"
        )

        await message.answer(text, parse_mode="Markdown")
        logger.info(f"User {telegram_id} requested autobuy status.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")


# /stats
@router.message(Command("stats"))
async def ask_stats_period(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=get_period_keyboard())

