from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from bot.middlewares.require_pair_middleware import RequirePairMiddleware
from bot.utils.mexc import get_user_client
from users.models import User
from logger import logger

router = Router()
router.message.middleware(RequirePairMiddleware())

# /price
@router.message(Command("price"))
async def get_user_price(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client, pair = get_user_client(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è –ø–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞
        if not pair:
            raise ValueError("–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ ticker_price (–ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å)
        ticker = client.ticker_price(pair)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–¶–µ–Ω–∞ {pair}: {ticker['price']}")
    
    except ValueError as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ API –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—â—É—é –æ—à–∏–±–∫—É
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")

# /balance
@router.message(Command("balance"))
async def balance_handler(message: Message):
    try:
        user = User.objects.get(telegram_id=message.from_user.id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 1000 USDT (–∑–∞–≥–ª—É—à–∫–∞)")
        logger.info(f"User {user.telegram_id} requested balance.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")

# /buy
@router.message(Command("buy"))
async def buy_handler(message: Message):
    try:
        user = User.objects.get(telegram_id=message.from_user.id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ
        await message.answer(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –ø–æ –ø–∞—Ä–µ {user.pair} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)")
        logger.info(f"User {user.telegram_id} made a buy request for {user.pair}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏.")

# /auto_buy
@router.message(Command("autobuy"))
async def auto_buy_handler(message: Message):
    try:
        user = User.objects.get(telegram_id=message.from_user.id)
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫—É
        await message.answer(f"ü§ñ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –ø–æ –ø–∞—Ä–µ {user.pair} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)")
        logger.info(f"User {user.telegram_id} activated auto-buy for {user.pair}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏.")

# /status
@router.message(Command("status"))
async def status_handler(message: Message):
    try:
        user = User.objects.get(telegram_id=message.from_user.id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        await message.answer(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ {user.pair}: –∞–∫—Ç–∏–≤–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)")
        logger.info(f"User {user.telegram_id} requested status for {user.pair}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")

# /stats
@router.message(Command("stats"))
async def stats_handler(message: Message):
    try:
        user = User.objects.get(telegram_id=message.from_user.id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–∫—É–ø–∫–∞–º
        await message.answer(f"üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {user.pair}:\n- –ü–æ–∫—É–ø–æ–∫: 5\n- –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: 120.00 USDT (–∑–∞–≥–ª—É—à–∫–∞)")
        logger.info(f"User {user.telegram_id} requested stats for {user.pair}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")