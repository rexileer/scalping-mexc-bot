import asyncio
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from bot.utils.mexc import get_user_client
from bot.utils.websocket_manager import websocket_manager
from bot.logger import logger

router = Router()


@router.message(Command("trigger_demo"))
async def demonstrate_trigger_logic(message: Message):
    """
    Demonstrate the new trigger logic for rise-based buying.
    """
    try:
        # Get user's trading client and pair
        client, pair = get_user_client(message.from_user.id)
        
        if not pair:
            await message.answer("‚ùå –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä—É –≤ /parameters")
            return

        # Get current bookTicker data
        bookticker_data = websocket_manager.get_current_bookticker(pair)
        if not bookticker_data:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö bookTicker. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            return

        # Get price direction
        direction_info = websocket_manager.get_price_direction(pair)
        
        demo_info = []
        demo_info.append("üéØ *Trigger Logic Demo*\n")
        
        # Show current market data
        bid_price = bookticker_data.get('bid_price', 'N/A')
        ask_price = bookticker_data.get('ask_price', 'N/A')
        mid_price = (float(bid_price) + float(ask_price)) / 2 if bid_price != 'N/A' and ask_price != 'N/A' else 0
        
        demo_info.append("üìä *Current Market Data:*")
        demo_info.append(f"   ‚Ä¢ Bid: {bid_price}")
        demo_info.append(f"   ‚Ä¢ Ask: {ask_price}")
        demo_info.append(f"   ‚Ä¢ Mid Price: {mid_price:.6f}")
        demo_info.append(f"   ‚Ä¢ Direction: {'üìà –†–æ—Å—Ç' if direction_info.get('is_rise', False) else 'üìâ –ü–∞–¥–µ–Ω–∏–µ'}")
        
        # Show trigger logic explanation
        demo_info.append("\nüéØ *Trigger Logic:*")
        demo_info.append("1Ô∏è‚É£ –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ/–ø—Ä–æ–¥–∞–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç—Ä–∏–≥–≥–µ—Ä")
        demo_info.append("2Ô∏è‚É£ –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–∞—É–∑—ã —Ü–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–æ—Å–ª–∞ - –ø–æ–∫—É–ø–∞–µ–º")
        demo_info.append("3Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Å–Ω–æ–≤–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä")
        demo_info.append("4Ô∏è‚É£ –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–æ—Å—Ç–µ")
        
        # Show how it works
        demo_info.append("\n‚ö° *How It Works:*")
        demo_info.append("‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏: –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ —Ä–∞–Ω—å—à–µ")
        demo_info.append("‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –Ω–∞ —Ä–æ—Å—Ç–µ: –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏")
        demo_info.append("‚Ä¢ –ü–∞—É–∑–∞: –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞")
        demo_info.append("‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏: –ø—Ä–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–æ—Å—Ç–µ")
        
        # Show current status
        demo_info.append("\nüîç *Current Status:*")
        demo_info.append(f"   ‚Ä¢ WebSocket: {'‚úÖ' if websocket_manager.market_connection else '‚ùå'}")
        demo_info.append(f"   ‚Ä¢ BookTicker: {'‚úÖ' if bookticker_data else '‚ùå'}")
        demo_info.append(f"   ‚Ä¢ Price History: {len(direction_info.get('price_history', []))} points")
        demo_info.append(f"   ‚Ä¢ Last Change: {direction_info.get('last_change_time', 0):.1f}s ago")
        
        await message.answer('\n'.join(demo_info), parse_mode='Markdown')
        
    except Exception as e:
        logger.exception(f"Error in trigger demo command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")


@router.message(Command("trigger_status"))
async def show_trigger_status(message: Message):
    """
    Show current trigger status for the user.
    """
    try:
        user_id = message.from_user.id
        
        # Get user's trading client and pair
        client, pair = get_user_client(user_id)
        
        if not pair:
            await message.answer("‚ùå –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä—É –≤ /parameters")
            return

        status_info = []
        status_info.append("üìä *Trigger Status*\n")
        
        # Check autobuy state
        from bot.commands.autobuy import autobuy_states
        
        if user_id in autobuy_states:
            state = autobuy_states[user_id]
            status_info.append("‚úÖ *Autobuy:* –ê–∫—Ç–∏–≤–µ–Ω")
            status_info.append(f"   ‚Ä¢ Rise Trigger: {'‚úÖ' if state.get('is_rise_trigger', False) else '‚ùå'}")
            status_info.append(f"   ‚Ä¢ Trigger Price: {state.get('trigger_price', 'None')}")
            status_info.append(f"   ‚Ä¢ Trigger Time: {state.get('trigger_time', 0):.1f}s ago")
            status_info.append(f"   ‚Ä¢ Rise Buy Count: {state.get('rise_buy_count', 0)}")
            status_info.append(f"   ‚Ä¢ Active Orders: {len(state.get('active_orders', []))}")
        else:
            status_info.append("‚ùå *Autobuy:* –ù–µ –∞–∫—Ç–∏–≤–µ–Ω")
        
        # Check bookTicker data
        bookticker_data = websocket_manager.get_current_bookticker(pair)
        if bookticker_data:
            status_info.append(f"\nüìà *Market Data:*")
            status_info.append(f"   ‚Ä¢ Bid: {bookticker_data.get('bid_price', 'N/A')}")
            status_info.append(f"   ‚Ä¢ Ask: {bookticker_data.get('ask_price', 'N/A')}")
            status_info.append(f"   ‚Ä¢ Is Rise: {'‚úÖ' if bookticker_data.get('is_rise', False) else '‚ùå'}")
        else:
            status_info.append(f"\n‚ùå *Market Data:* –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        await message.answer('\n'.join(status_info), parse_mode='Markdown')
        
    except Exception as e:
        logger.exception(f"Error in trigger status command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}") 