import asyncio
from aiogram.types import Message
from asgiref.sync import sync_to_async
from django.utils import timezone
from users.models import Deal
from logger import logger
from bot.utils.mexc import handle_mexc_response
from mexc_sdk import Trade


async def monitor_order(message: Message, order_id: str):
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–∞ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        deal = await sync_to_async(Deal.objects.get)(order_id=order_id)
        user = deal.user
        trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
        symbol = user.pair.replace("/", "")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
        return

    while True:
        try:
            order_status = trade_client.query_order(symbol, options={"orderId": order_id})
            handle_mexc_response(order_status, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–∞")
            status = order_status.get("status")
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ {order_id}: {status}")
            if status == "CANCELED":
                deal.status = "CANCELED"
                deal.updated_at = timezone.now()
                await sync_to_async(deal.save)()
                await message.answer(
                    f"‚ùå –°–î–ï–õ–ö–ê {order_id} –û–¢–ú–ï–ù–ï–ù–ê\n\n "
                    f"üîÅ –ü–æ–∫—É–ø–∫–∞: {deal.quantity:.2f} {deal.symbol[:3]} –ø–æ {deal.buy_price:.6f} {deal.symbol[3:]}\n"
                    f"üìà –ü—Ä–æ–¥–∞–∂–∞: {deal.quantity:.2f} {deal.symbol[:3]} –ø–æ {deal.sell_price:.6f} {deal.symbol[3:]}\n\n"    
                )
                return

            if status == "FILLED":
                deal.status = "FILLED"
                deal.updated_at = timezone.now()
                await sync_to_async(deal.save)()

                buy_total = deal.quantity * deal.buy_price
                sell_total = deal.quantity * deal.sell_price
                profit = sell_total - buy_total
                symbol = deal.symbol
                base = symbol[:3]
                quote = symbol[3:]

                text = (
                    f"‚úÖ –°–î–ï–õ–ö–ê –ò–°–ü–û–õ–ù–ï–ù–ê\n\n"
                    f"üîÅ –ü–æ–∫—É–ø–∫–∞: {deal.quantity:.2f} {base} –ø–æ {deal.buy_price:.6f} {quote}\n"
                    f"üìà –ü—Ä–æ–¥–∞–∂–∞: {deal.quantity:.2f} {base} –ø–æ {deal.sell_price:.6f} {quote}\n\n"
                    f"üí∞ –ü—Ä–∏–±—ã–ª—å: {profit:+.6f} {quote}"
                )

                await message.answer(text)
                return


            await asyncio.sleep(10)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
            await asyncio.sleep(60)