import asyncio
from aiogram.types import Message
from asgiref.sync import sync_to_async
from django.utils import timezone
from users.models import Deal
from bot.logger import logger
from bot.utils.mexc import handle_mexc_response
from bot.utils.api_errors import parse_mexc_error
from mexc_sdk import Trade
from bot.constants import MAX_FAILS


async def monitor_order(message: Message, order_id: str, user_order_number: int):
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–∞ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        deal = await sync_to_async(Deal.objects.get)(order_id=order_id)
        user = deal.user
        trade_client = Trade(api_key=user.api_key, api_secret=user.api_secret)
        symbol = user.pair.replace("/", "")
        fail_count = 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        error_message = parse_mexc_error(e)
        user_message = f"‚ùå {error_message}"
        await message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞', parse_mode='HTML')
        await message.answer(user_message, parse_mode='HTML')
        return

    while True:
        try:
            order_status = trade_client.query_order(symbol, options={"orderId": order_id})
            handle_mexc_response(order_status, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–∞")
            status = order_status.get("status")

            if status == "CANCELED":
                deal.status = "CANCELED"
                deal.updated_at = timezone.now()
                await sync_to_async(deal.save)()
                await message.answer(
                    f"‚ùå <b>–°–î–ï–õ–ö–ê {user_order_number} –û–¢–ú–ï–ù–ï–ù–ê</b>\n\n"
                    f"üîÅ –ü–æ–∫—É–ø–∫–∞: {deal.quantity:.6f} {deal.symbol[:3]} –ø–æ {deal.buy_price:.6f} {deal.symbol[3:]}\n"
                    f"üìà –ü—Ä–æ–¥–∞–∂–∞: {deal.quantity:.6f} {deal.symbol[:3]} –ø–æ {deal.sell_price:.6f} {deal.symbol[3:]}\n",
                    parse_mode='HTML'
                )
                return

            if status == "FILLED":
                deal.status = "FILLED"
                deal.updated_at = timezone.now()
                await sync_to_async(deal.save)()

                buy_total = deal.quantity * deal.buy_price
                sell_total = deal.quantity * deal.sell_price
                profit = sell_total - buy_total
                symbol = deal.symbol
                base = symbol[:3]
                quote = symbol[3:]

                text = (
                    f"‚úÖ *–°–î–ï–õ–ö–ê {user_order_number} –ó–ê–í–ï–†–®–ï–ù–ê*\n\n"
                    f"üì¶ –ö–æ–ª-–≤–æ: `{deal.quantity:.6f}` {base}\n"
                    f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ –ø–æ: `{deal.sell_price:.6f}` {quote}\n"
                    f"üìä –ü—Ä–∏–±—ã–ª—å: `{profit:.4f}` {quote}"
                )

                await message.answer(text, parse_mode='Markdown')
                return

            # –û—Ä–¥–µ—Ä –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω
            fail_count = 0  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            await asyncio.sleep(5)

        except asyncio.CancelledError:
            logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–∞ {order_id} –æ—Ç–º–µ–Ω—ë–Ω –≤—Ä—É—á–Ω—É—é")
            return
        except Exception as e:
            fail_count += 1
            logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–∞ {order_id} (–ø–æ–ø—ã—Ç–∫–∞ {fail_count}/{MAX_FAILS}): {e}")
            await asyncio.sleep(5)
            if fail_count >= MAX_FAILS:
                logger.error(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–∞ {order_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ {MAX_FAILS} –æ—à–∏–±–æ–∫")
                error_message = parse_mexc_error(e)
                user_message = f"‚ùå {error_message}"
                await message.answer(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –æ—Ä–¥–µ—Ä–∞ {user_order_number}', parse_mode='HTML')
                await message.answer(user_message, parse_mode='HTML')
                return