import asyncio
import json
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from bot.utils.mexc import get_user_client
from bot.utils.websocket_manager import websocket_manager
from logger import logger

router = Router()


@router.message(Command("ws_debug"))
async def debug_websocket_connection(message: Message):
    """
    Debug command to test WebSocket connections and diagnose issues.
    """
    try:
        # Get user's trading client and pair
        client, pair = get_user_client(message.from_user.id)
        
        if not pair:
            await message.answer("‚ùå –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä—É –≤ /parameters")
            return

        debug_info = []
        debug_info.append("üîç *WebSocket Debug Information*\n")

        # Check market connection status
        if websocket_manager.market_connection:
            debug_info.append("‚úÖ *Market WebSocket:* –ü–æ–¥–∫–ª—é—á–µ–Ω")
            ws = websocket_manager.market_connection.get('ws')
            if ws:
                debug_info.append(f"   ‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'–û—Ç–∫—Ä—ã—Ç' if not ws.closed else '–ó–∞–∫—Ä—ã—Ç'}")
                debug_info.append(f"   ‚Ä¢ Close Code: {ws.close_code}")
        else:
            debug_info.append("‚ùå *Market WebSocket:* –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # Check subscriptions
        debug_info.append(f"\nüìà *–ü–æ–¥–ø–∏—Å–∫–∏:*")
        debug_info.append(f"   ‚Ä¢ Market Data: {len(websocket_manager.market_subscriptions)} —Å–∏–º–≤–æ–ª–æ–≤")
        debug_info.append(f"   ‚Ä¢ BookTicker: {len(websocket_manager.bookticker_subscriptions)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if websocket_manager.market_subscriptions:
            debug_info.append(f"   ‚Ä¢ Market Symbols: {', '.join(websocket_manager.market_subscriptions)}")
        if websocket_manager.bookticker_subscriptions:
            debug_info.append(f"   ‚Ä¢ BookTicker Symbols: {', '.join(websocket_manager.bookticker_subscriptions)}")

        # Check cached data
        debug_info.append(f"\nüíæ *–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*")
        debug_info.append(f"   ‚Ä¢ BookTicker entries: {len(websocket_manager.current_bookticker)}")
        
        if websocket_manager.current_bookticker:
            for symbol, data in websocket_manager.current_bookticker.items():
                debug_info.append(f"   ‚Ä¢ {symbol}: bid={data.get('bid_price', 'N/A')}, ask={data.get('ask_price', 'N/A')}")

        # Check callbacks
        debug_info.append(f"\nüîÑ *Callbacks:*")
        debug_info.append(f"   ‚Ä¢ Price callbacks: {len(websocket_manager.price_callbacks)} symbols")
        debug_info.append(f"   ‚Ä¢ BookTicker callbacks: {len(websocket_manager.bookticker_callbacks)} symbols")

        # Test REST API for comparison
        try:
            ticker = client.book_ticker(pair)
            rest_bid = ticker.get('bidPrice', 'N/A')
            rest_ask = ticker.get('askPrice', 'N/A')
            debug_info.append(f"\nüì° *REST API Test:*")
            debug_info.append(f"   ‚Ä¢ {pair}: bid={rest_bid}, ask={rest_ask}")
        except Exception as e:
            debug_info.append(f"\n‚ùå *REST API Error:* {str(e)}")

        # Test WebSocket subscription
        debug_info.append(f"\nüß™ *WebSocket Test:*")
        if websocket_manager.market_connection and not websocket_manager.market_connection['ws'].closed:
            try:
                # Try to subscribe to bookTicker for this pair
                await websocket_manager.subscribe_bookticker_data([pair])
                debug_info.append(f"   ‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {pair} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                
                # Wait a moment and check if we got data
                await asyncio.sleep(2)
                current_data = websocket_manager.get_current_bookticker(pair)
                if current_data:
                    debug_info.append(f"   ‚Ä¢ ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: bid={current_data['bid_price']}, ask={current_data['ask_price']}")
                else:
                    debug_info.append(f"   ‚Ä¢ ‚è≥ –î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑)")
            except Exception as e:
                debug_info.append(f"   ‚Ä¢ ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        else:
            debug_info.append(f"   ‚Ä¢ ‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

        await message.answer('\n'.join(debug_info), parse_mode='Markdown')
        
    except Exception as e:
        logger.exception(f"Error in WebSocket debug command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {str(e)}")


@router.message(Command("ws_test"))
async def test_websocket_subscription(message: Message):
    """
    Test WebSocket subscription and force reconnect if needed.
    """
    try:
        # Get user's trading client and pair
        client, pair = get_user_client(message.from_user.id)
        
        if not pair:
            await message.answer("‚ùå –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä—É –≤ /parameters")
            return

        test_info = []
        test_info.append("üß™ *WebSocket Connection Test*\n")

        # Force reconnect to market data
        test_info.append("1Ô∏è‚É£ *–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...*")
        
        # Disconnect if connected
        if websocket_manager.market_connection:
            await websocket_manager.disconnect_market()
            test_info.append("   ‚Ä¢ –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        
        # Connect fresh
        success = await websocket_manager.connect_market_data()
        if success:
            test_info.append("   ‚Ä¢ ‚úÖ –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            test_info.append("   ‚Ä¢ ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            await message.answer('\n'.join(test_info), parse_mode='Markdown')
            return

        # Subscribe to both deals and bookTicker
        test_info.append("\n2Ô∏è‚É£ *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ...*")
        
        try:
            # Subscribe to deals
            await websocket_manager.subscribe_market_data([pair])
            test_info.append(f"   ‚Ä¢ ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ deals –¥–ª—è {pair}")
            
            # Subscribe to bookTicker
            await websocket_manager.subscribe_bookticker_data([pair])
            test_info.append(f"   ‚Ä¢ ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ bookTicker –¥–ª—è {pair}")
            
        except Exception as e:
            test_info.append(f"   ‚Ä¢ ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")

        # Wait for data
        test_info.append("\n3Ô∏è‚É£ *–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...*")
        await asyncio.sleep(5)  # Wait 5 seconds for data
        
        # Check what we received
        deals_count = len([s for s in websocket_manager.market_subscriptions if s == pair])
        bookticker_count = len([s for s in websocket_manager.bookticker_subscriptions if s == pair])
        cached_data = websocket_manager.get_current_bookticker(pair)
        
        test_info.append(f"   ‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ deals: {deals_count}")
        test_info.append(f"   ‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ bookTicker: {bookticker_count}")
        
        if cached_data:
            test_info.append(f"   ‚Ä¢ ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: bid={cached_data['bid_price']}, ask={cached_data['ask_price']}")
        else:
            test_info.append(f"   ‚Ä¢ ‚è≥ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")

        # Test callback registration
        test_info.append("\n4Ô∏è‚É£ *–¢–µ—Å—Ç callback —Å–∏—Å—Ç–µ–º—ã...*")
        
        callback_called = False
        
        async def test_callback(symbol, bid_price, ask_price, bid_qty, ask_qty):
            nonlocal callback_called
            callback_called = True
            logger.info(f"Test callback called for {symbol}: bid={bid_price}, ask={ask_price}")
        
        try:
            await websocket_manager.register_bookticker_callback(pair, test_callback)
            test_info.append(f"   ‚Ä¢ ‚úÖ Callback –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # Wait a bit more for potential data
            await asyncio.sleep(3)
            
            if callback_called:
                test_info.append(f"   ‚Ä¢ ‚úÖ Callback –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏")
            else:
                test_info.append(f"   ‚Ä¢ ‚è≥ Callback –ø–æ–∫–∞ –Ω–µ –≤—ã–∑–≤–∞–Ω (–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–∏—à–ª–∏)")
                
        except Exception as e:
            test_info.append(f"   ‚Ä¢ ‚ùå –û—à–∏–±–∫–∞ callback: {str(e)}")

        await message.answer('\n'.join(test_info), parse_mode='Markdown')
        
    except Exception as e:
        logger.exception(f"Error in WebSocket test command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}") 