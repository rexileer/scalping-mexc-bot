import asyncio
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from bot.utils.mexc import get_user_client
from bot.utils.websocket_manager import websocket_manager
from bot.commands.autobuy import autobuy_states, trigger_states
from bot.logger import logger
import time

router = Router()


@router.message(Command("trigger_debug"))
async def debug_trigger_logic(message: Message):
    """
    Debug command to show trigger logic status and bookTicker data.
    """
    try:
        # Get user's trading client and pair
        client, pair = get_user_client(message.from_user.id)
        
        if not pair:
            await message.answer("‚ùå –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä—É –≤ /parameters")
            return

        user_id = message.from_user.id
        debug_info = []
        debug_info.append("üîç *Trigger Debug Information*\n")

        # Check if user is in autobuy
        if user_id in autobuy_states:
            state = autobuy_states[user_id]
            debug_info.append("‚úÖ *Autobuy State:* –ê–∫—Ç–∏–≤–µ–Ω")
            debug_info.append(f"   ‚Ä¢ Last Buy Price: {state.get('last_buy_price', 'None')}")
            debug_info.append(f"   ‚Ä¢ Current Price: {state.get('current_price', 'None')}")
            debug_info.append(f"   ‚Ä¢ Active Orders: {len(state.get('active_orders', []))}")
            debug_info.append(f"   ‚Ä¢ Waiting Opportunity: {state.get('waiting_for_opportunity', False)}")
            debug_info.append(f"   ‚Ä¢ Is Rise Trigger: {state.get('is_rise_trigger', False)}")
            debug_info.append(f"   ‚Ä¢ Trigger Price: {state.get('trigger_price', 'None')}")
            debug_info.append(f"   ‚Ä¢ Trigger Time: {state.get('trigger_time', 0)}")
            debug_info.append(f"   ‚Ä¢ Rise Buy Count: {state.get('rise_buy_count', 0)}")
        else:
            debug_info.append("‚ùå *Autobuy State:* –ù–µ –∞–∫—Ç–∏–≤–µ–Ω")

        # Check bookTicker data
        bookticker_data = websocket_manager.get_current_bookticker(pair)
        if bookticker_data:
            debug_info.append(f"\nüìä *BookTicker Data:*")
            debug_info.append(f"   ‚Ä¢ Bid Price: {bookticker_data.get('bid_price', 'N/A')}")
            debug_info.append(f"   ‚Ä¢ Ask Price: {bookticker_data.get('ask_price', 'N/A')}")
            debug_info.append(f"   ‚Ä¢ Bid Qty: {bookticker_data.get('bid_qty', 'N/A')}")
            debug_info.append(f"   ‚Ä¢ Ask Qty: {bookticker_data.get('ask_qty', 'N/A')}")
            debug_info.append(f"   ‚Ä¢ Is Rise: {bookticker_data.get('is_rise', 'N/A')}")
            debug_info.append(f"   ‚Ä¢ Last Change Time: {bookticker_data.get('last_change_time', 'N/A')}")
            debug_info.append(f"   ‚Ä¢ Current Price: {bookticker_data.get('current_price', 'N/A')}")
        else:
            debug_info.append(f"\n‚ùå *BookTicker Data:* –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

        # Check price direction
        direction_info = websocket_manager.get_price_direction(pair)
        debug_info.append(f"\nüìà *Price Direction:*")
        debug_info.append(f"   ‚Ä¢ Is Rise: {direction_info.get('is_rise', False)}")
        debug_info.append(f"   ‚Ä¢ Last Change Time: {direction_info.get('last_change_time', 0)}")
        debug_info.append(f"   ‚Ä¢ Current Price: {direction_info.get('current_price', 0)}")
        debug_info.append(f"   ‚Ä¢ Price History Length: {len(direction_info.get('price_history', []))}")

        # Check WebSocket connection
        debug_info.append(f"\nüîó *WebSocket Status:*")
        debug_info.append(f"   ‚Ä¢ Market Connection: {'‚úÖ' if websocket_manager.market_connection else '‚ùå'}")
        debug_info.append(f"   ‚Ä¢ BookTicker Subscriptions: {len(websocket_manager.bookticker_subscriptions)}")
        debug_info.append(f"   ‚Ä¢ Market Subscriptions: {len(websocket_manager.market_subscriptions)}")

        await message.answer('\n'.join(debug_info), parse_mode='Markdown')
        
    except Exception as e:
        logger.exception(f"Error in trigger debug command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {str(e)}")


@router.message(Command("trigger_test"))
async def test_trigger_logic(message: Message):
    """
    Test trigger logic by simulating a trigger setup.
    """
    try:
        user_id = message.from_user.id
        
        if user_id not in autobuy_states:
            await message.answer("‚ùå –ê–≤—Ç–æ–±–∞–π –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–±–∞–π —Å–Ω–∞—á–∞–ª–∞.")
            return

        # Get current bookTicker data
        client, pair = get_user_client(user_id)
        bookticker_data = websocket_manager.get_current_bookticker(pair)
        
        if not bookticker_data:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö bookTicker. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            return

        # Simulate trigger setup
        state = autobuy_states[user_id]
        mid_price = (float(bookticker_data['bid_price']) + float(bookticker_data['ask_price'])) / 2
        current_time = time.time()
        
        # Set trigger
        state['trigger_price'] = mid_price
        state['trigger_time'] = current_time
        state['is_rise_trigger'] = True
        state['is_trigger_activated'] = False
        state['trigger_activated_time'] = 0
        state['pause_trend_prices'] = []
        state['trend_only_rise'] = True
        state['last_pause_price'] = None
        
        test_info = []
        test_info.append("üß™ *Trigger Test Results*\n")
        test_info.append(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:")
        test_info.append(f"   ‚Ä¢ –¶–µ–Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {mid_price:.6f}")
        test_info.append(f"   ‚Ä¢ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {current_time}")
        test_info.append(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω")
        test_info.append(f"\nüìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        test_info.append(f"   ‚Ä¢ Bid: {bookticker_data['bid_price']}")
        test_info.append(f"   ‚Ä¢ Ask: {bookticker_data['ask_price']}")
        test_info.append(f"   ‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–†–æ—Å—Ç' if bookticker_data.get('is_rise', False) else '–ü–∞–¥–µ–Ω–∏–µ'}")
        
        await message.answer('\n'.join(test_info), parse_mode='Markdown')
        
    except Exception as e:
        logger.exception(f"Error in trigger test command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {str(e)}") 