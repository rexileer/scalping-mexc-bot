import os
import sys
import traceback


sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
os.environ.update({'DJANGO_ALLOW_ASYNC_UNSAFE': "true"})

import django
django.setup()

import asyncio
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from bot.daily_stats import start_scheduler
from bot.config import load_config
from bot import config  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å config
from bot.logger import logger, log_to_db
from bot.routers import setup_routers
from bot.middlewares.access_middleware import AccessMiddleware
from bot.middlewares.auth_middleware import AuthMiddleware
from bot.middlewares.logging_middleware import LoggingMiddleware
from bot.middlewares.error_reporting_middleware import ErrorReportingMiddleware
from bot.utils.set_commands import set_default_commands
from bot.utils.log_cleaner import start_log_cleaner
from bot.utils.websocket_manager import websocket_manager
from bot.utils.autobuy_restart import restart_autobuy_for_users
from bot.utils.reconciler import order_status_reconciler_loop
from django.conf import settings

config_obj = load_config()


async def main():
    try:
        logger.info("Starting bot initialization...")
        bot = Bot(
            token=config_obj.bot_token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        config.bot_instance = bot
        
        dp = Dispatcher(storage=MemoryStorage())

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã
        dp.include_router(setup_routers())
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware (–æ—à–∏–±–∫–∏ –ø–µ—Ä–≤—ã–º–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ)
        dp.message.middleware(ErrorReportingMiddleware())
        dp.callback_query.middleware(ErrorReportingMiddleware())
        dp.message.middleware(AccessMiddleware())
        dp.message.middleware(AuthMiddleware())
        
        # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥
        dp.message.middleware(LoggingMiddleware())
        dp.callback_query.middleware(LoggingMiddleware())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        start_scheduler(bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        retention_days = getattr(settings, 'LOG_RETENTION_DAYS', 7)
        log_cleaner_task = await start_log_cleaner(retention_days=retention_days)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await set_default_commands(bot)

        # –¢–µ—Å—Ç –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
        try:
            from bot.utils.error_notifier import notify_error_text
            await notify_error_text("üß™ –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω: –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        except Exception:
            pass
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–ª—é—á–∞–º–∏
        logger.info("Initializing WebSocket connections for users...")
        websocket_init_task = asyncio.create_task(websocket_manager.connect_valid_users())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        connection_monitor_task = asyncio.create_task(websocket_manager.monitor_connections())

        # –§–æ–Ω–æ–≤—ã–π reconciler —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤
        reconciler_task = asyncio.create_task(order_status_reconciler_loop(poll_interval_seconds=60))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–µ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω
        # –ë—É–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
        logger.info("Bot started successfully")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        await log_to_db("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", level='INFO', extra_data={
            'type': 'bot_start',
            'version': '1.0',
            'environment': os.environ.get('DJANGO_SETTINGS_MODULE', 'unknown')
        })
        
        # –†–µ—Å—Ç–∞—Ä—Ç autobuy –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        logger.info("Restarting autobuy for users with active status...")
        autobuy_restart_task = asyncio.create_task(restart_autobuy_for_users(bot))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Starting polling...")
        await asyncio.gather(
            bot.delete_webhook(drop_pending_updates=True),
            dp.start_polling(bot, skip_updates=False),
        )

    except Exception as e:
        error_traceback = traceback.format_exc()
        logger.error(f"Error while starting bot: {e}\n{error_traceback}")
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
        try:
            await log_to_db(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", 
                level='ERROR', 
                extra_data={
                    'type': 'bot_error',
                    'traceback': error_traceback,
                }
            )
        except Exception as log_error:
            # –ï—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            logger.critical(f"Failed to log error to database: {log_error}")
    finally:
        if 'bot' in locals():
            try:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                logger.info("Closing all WebSocket connections...")
                await websocket_manager.disconnect_all()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞
                await log_to_db("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", level='INFO', extra_data={
                    'type': 'bot_stop',
                })
                await bot.close()
                # –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                config.bot_instance = None
            except Exception as close_error:
                logger.error(f"Error while closing bot: {close_error}")


if __name__ == "__main__":
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Ctrl+C –∏ –¥—Ä—É–≥–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by keyboard interrupt")
    except Exception as e:
        logger.critical(f"Unhandled exception: {e}\n{traceback.format_exc()}")
        sys.exit(1)