from aiogram.types import Message, Update
from aiogram import BaseMiddleware
from typing import Callable, Dict, Any, Awaitable
from bot.logger import logger
from users.models import User 
from subscriptions.models import Subscription, BotMessageForSubscription
from datetime import datetime, timezone
from django.db.utils import OperationalError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã (–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –≤ settings –≤—ã—Ç–∞—â–∏—Ç—å)
PAYMENT_WALLET = "TY43ubA82J5mrViFwAsNpNLkNLaj2rvx1Z"
PAYMENT_NETWORK = "TRC20"

DEFAULT_PAYMENT_MESSAGE = (
    f"üîí –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:\n\n"
    f"1Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ 100 USDT –≤ —Å–µ—Ç–∏ {PAYMENT_NETWORK} –Ω–∞ –∫–æ—à–µ–ª—ë–∫:\n"
    f"<code>{PAYMENT_WALLET}</code>\n\n"
    f"2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ TXID –≤ –õ–° üëâ @ScalpingBotSupport\n\n"
    f"–ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞–∂–∞—Ç—å /start –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
)

class AccessMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        message = event.message

        if message:
            telegram_user = message.from_user

            try:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞, –µ—Å–ª–∏ –Ω–µ—Ç
                user, _ = await User.objects.aget_or_create(
                    telegram_id=telegram_user.id,
                    defaults={"name": telegram_user.username or ""}
                )
            except Exception as e:
                logger.error(f"DB error while checking/creating user: {e}")
                return  # –õ—É—á—à–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å –æ—à–∏–±–∫–æ–π

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            now = datetime.now(timezone.utc)
            try:
                subscription = await Subscription.objects.filter(
                    telegram_id=telegram_user.id,
                    expires_at__gte=now
                ).afirst()
            except Exception as e:
                logger.error(f"DB error while checking subscription: {e}")
                subscription = None

            # –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not subscription:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã
                try:
                    custom_message = await BotMessageForSubscription.objects.afirst()
                    text_to_send = custom_message.text if custom_message else DEFAULT_PAYMENT_MESSAGE
                except OperationalError:
                    # –ë–∞–∑–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞, –∏–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
                    text_to_send = DEFAULT_PAYMENT_MESSAGE
                except Exception as e:
                    logger.error(f"Error while fetching subscription message: {e}")
                    text_to_send = DEFAULT_PAYMENT_MESSAGE

                await message.answer(text_to_send, parse_mode="HTML")
                return

        return await handler(event, data)
