#!/usr/bin/env python3
"""
Debug script –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ WebSocket –ø—Ä–æ–±–ª–µ–º —Å MEXC.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
python debug_websocket.py

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É MEXC –æ—Ç–∫–ª—é—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.
"""

import asyncio
import json
import time
import aiohttp
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class MEXCDebugClient:
    """Debug client –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MEXC WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    
    BASE_URL = "wss://wbs.mexc.com/ws"
    
    def __init__(self):
        self.connection_start = None
        self.last_message_time = None
        self.message_count = 0
        self.subscription_responses = []
        
    async def test_market_connection(self):
        """–¢–µ—Å—Ç market data —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        logger.info("Starting MEXC WebSocket connection test...")
        
        try:
            session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=120),  # 2 –º–∏–Ω—É—Ç—ã timeout
                connector=aiohttp.TCPConnector(
                    enable_cleanup_closed=True
                )
            )
            
            ws = await session.ws_connect(
                self.BASE_URL,
                heartbeat=20,
                compress=False
            )
            
            self.connection_start = time.time()
            logger.info(f"‚úÖ Connected to {self.BASE_URL}")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ KASUSDC
            subscription_msg = {
                "method": "SUBSCRIPTION",
                "params": [
                    "spot@public.deals.v3.api@KASUSDC",
                    "spot@public.bookTicker.v3.api@KASUSDC"
                ],
                "id": int(time.time() * 1000)
            }
            
            logger.info(f"üì§ Sending subscription: {subscription_msg}")
            await ws.send_str(json.dumps(subscription_msg))
            
            # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await self._listen_messages(ws)
            
        except Exception as e:
            logger.error(f"‚ùå Connection test failed: {e}")
        finally:
            try:
                await ws.close()
                await session.close()
            except:
                pass
    
    async def _listen_messages(self, ws):
        """–°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket."""
        logger.info("üéß Starting to listen for messages...")
        
        try:
            while not ws.closed:
                try:
                    msg = await ws.receive(timeout=60)  # 1 –º–∏–Ω—É—Ç–∞ timeout
                    
                    if msg.type == aiohttp.WSMsgType.TEXT:
                        self.message_count += 1
                        self.last_message_time = time.time()
                        connection_age = self.last_message_time - self.connection_start
                        
                        data = json.loads(msg.data)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                        if 'ping' in data:
                            logger.info(f"üèì PING received at {connection_age:.1f}s: {data}")
                            # –û—Ç–≤–µ—á–∞–µ–º PONG
                            await ws.send_json({"pong": data['ping']})
                            logger.info(f"üèì PONG sent")
                            
                        elif data.get('method') == 'SUBSCRIPTION':
                            self.subscription_responses.append(data)
                            if data.get('code') == 0:
                                logger.info(f"‚úÖ Subscription successful at {connection_age:.1f}s: {data}")
                            else:
                                logger.error(f"‚ùå Subscription failed at {connection_age:.1f}s: {data}")
                                
                        elif 's' in data:  # Market data message
                            symbol = data.get('s')
                            channel = data.get('c', '')
                            logger.info(f"üìä Market data at {connection_age:.1f}s: {symbol} via {channel[:30]}...")
                            
                        else:
                            logger.info(f"üì® Other message at {connection_age:.1f}s: {str(data)[:100]}...")
                    
                    elif msg.type == aiohttp.WSMsgType.CLOSED:
                        connection_age = time.time() - self.connection_start
                        logger.warning(f"üîå WebSocket closed at {connection_age:.1f}s. Close code: {ws.close_code}")
                        break
                        
                    elif msg.type == aiohttp.WSMsgType.ERROR:
                        connection_age = time.time() - self.connection_start
                        logger.error(f"üí• WebSocket error at {connection_age:.1f}s: {ws.exception()}")
                        break
                        
                    elif msg.type == aiohttp.WSMsgType.CLOSING:
                        connection_age = time.time() - self.connection_start
                        logger.info(f"üîÑ WebSocket closing at {connection_age:.1f}s...")
                        # –ñ–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                        for i in range(50):
                            if ws.closed:
                                break
                            await asyncio.sleep(0.1)
                        break
                        
                except asyncio.TimeoutError:
                    connection_age = time.time() - self.connection_start
                    logger.warning(f"‚è∞ Timeout receiving message at {connection_age:.1f}s")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    if ws.closed:
                        logger.warning(f"üîå WebSocket closed during timeout at {connection_age:.1f}s")
                        break
                        
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    try:
                        ping_msg = {"ping": int(time.time() * 1000)}
                        await ws.send_json(ping_msg)
                        logger.info(f"üèì Manual PING sent at {connection_age:.1f}s")
                    except Exception as e:
                        logger.error(f"üí• Failed to send ping: {e}")
                        break
                        
        except Exception as e:
            connection_age = time.time() - self.connection_start if self.connection_start else 0
            logger.error(f"üí• Error in message listener at {connection_age:.1f}s: {e}")
        finally:
            self._print_summary()
    
    def _print_summary(self):
        """–ü–µ—á–∞—Ç–∞–µ–º —Å–≤–æ–¥–∫—É —Ç–µ—Å—Ç–∞."""
        connection_age = time.time() - self.connection_start if self.connection_start else 0
        
        logger.info("=" * 50)
        logger.info("üìä CONNECTION TEST SUMMARY")
        logger.info("=" * 50)
        logger.info(f"‚è±Ô∏è  Connection duration: {connection_age:.1f} seconds")
        logger.info(f"üì® Total messages received: {self.message_count}")
        logger.info(f"üìã Subscription responses: {len(self.subscription_responses)}")
        
        if self.subscription_responses:
            logger.info("üìã Subscription details:")
            for resp in self.subscription_responses:
                logger.info(f"   - {resp}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
        if connection_age < 35:
            logger.warning("‚ö†Ô∏è  CONNECTION CLOSED TOO EARLY!")
            logger.warning("üîç Possible causes:")
            logger.warning("   1. Invalid subscription parameters")
            logger.warning("   2. Server-side connection limits")
            logger.warning("   3. Authentication issues")
            logger.warning("   4. Rate limiting")
        elif 30 <= connection_age <= 35:
            logger.warning("‚ö†Ô∏è  CONNECTION CLOSED AT ~30 SECONDS")
            logger.warning("üîç This matches MEXC documentation:")
            logger.warning("   'If there is no valid websocket subscription, server disconnects in 30 seconds'")
            if len(self.subscription_responses) == 0:
                logger.error("‚ùå NO SUBSCRIPTION RESPONSES RECEIVED!")
                logger.error("   This indicates subscription requests were not processed")
            elif not any(r.get('code') == 0 for r in self.subscription_responses):
                logger.error("‚ùå ALL SUBSCRIPTIONS FAILED!")
                logger.error("   Check subscription parameters and symbol validity")
        else:
            logger.info("‚úÖ Connection lasted longer than 30 seconds - good!")
            
        logger.info("=" * 50)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    debug_client = MEXCDebugClient()
    await debug_client.test_market_connection()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Test interrupted by user")
    except Exception as e:
        logger.error(f"üí• Test failed: {e}")